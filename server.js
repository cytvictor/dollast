// Generated by LiveScript 1.3.1
(function(){
  var koa, koaJson, koaStatic, koaBetterBody, koaGenericSession, koaPassport, util, koaValidate, koaRouter, log4js, koaSend, path, coBusboy, fs, config, app, db, publicRouter, privateRouter;
  koa = require('koa');
  koaJson = require('koa-json');
  koaStatic = require('koa-static');
  koaBetterBody = require('koa-better-body');
  koaGenericSession = require('koa-generic-session');
  koaPassport = require('koa-passport');
  util = require('util');
  koaValidate = require('koa-validate');
  koaRouter = require('koa-router');
  log4js = require('log4js');
  koaSend = require('koa-send');
  path = require('path');
  coBusboy = require('co-busboy');
  fs = require('fs');
  config = require('./config');
  app = koa();
  config.logger = log4js.getLogger('dollast');
  db = require('./db');
  if (!db) {
    logger.fatal("No Database found");
  }
  app.use(function*(next){
    console.log(this.req.method + " " + this.req.url);
    yield next;
  });
  app.keys = ['drdrd'];
  app.use(koaGenericSession({
    cookie: {
      maxAge: 1000 * 60 * 5
    }
  }));
  app.use(koaBetterBody({
    extendTypes: {
      json: ['application/x-javascript'],
      multipart: ['multipart/form-data']
    }
  }));
  require('./auth').init(db);
  app.use(koaPassport.initialize());
  app.use(koaPassport.session());
  app.use(function*(next){
    var ref$;
    (ref$ = this.session).theme || (ref$.theme = "default");
    yield next;
  });
  app.use(koaJson());
  app.use(koaStatic("public/"));
  app.use(function*(next){
    var ref$;
    if ((ref$ = this.method) === 'HEAD' || ref$ === 'GET') {
      if (yield koaSend(this, this.path, {
        index: 'index.html',
        root: path.resolve("theme/" + this.session.theme)
      })) {
        return;
      }
    }
    yield next;
  });
  publicRouter = new koaRouter();
  publicRouter.post('/login', function*(next){
    var cb, this$ = this;
    cb = function*(err, user, info){
      var that;
      if (that = err) {
        throw that;
      }
      if (user !== false) {
        yield this$.login(user);
        this$.body = {
          status: true
        };
      } else {
        this$.body = {
          status: false
        };
      }
    };
    yield koaPassport.authenticate('local', cb).call(this, next);
  }).get('/logout', function*(next){
    this.logout();
    this.redirect('/#/');
  });
  app.use(publicRouter.middleware());
  app.use(function*(next){
    if (true || this.req.isAuthenticated()) {
      yield next;
    } else {
      this.redirect('/login');
    }
  });
  privateRouter = new koaRouter();
  privateRouter.get('/problem', function*(){
    this.body = {
      probs: yield db.prob.list()
    };
  }).get('/problem/next-count', function*(){
    this.body = {
      _id: yield db.prob.nextCount()
    };
  }).get('/problem/:pid', function*(){
    var pid;
    pid = this.params.pid;
    this.body = {
      prob: yield db.prob.show(pid, {
        mode: "view"
      })
    };
  }).get('/problem/:pid/total', function*(){
    var pid;
    pid = parseInt(this.params.pid);
    this.body = {
      prob: yield db.prob.show(pid, {
        mode: "total"
      })
    };
  }).put('/problem/:pid', function*(){
    this.body = {
      status: yield db.prob.modify(this.params.pid, this.request.body)
    };
  }).post('/problem/:pid/upload', function*(){
    var pid, parts, part;
    pid = parseInt(this.params.pid);
    parts = coBusboy(this, {
      autoFields: true
    });
    while (part = yield parts) {
      console.log("filename: " + part.filename);
      part.pipe(fs.createWriteStream("upload/" + part.filename));
    }
    console.log("done");
    this.body = {
      status: true
    };
  })['delete']('/problem/:pid', function*(){
    throw Error('unimplemented');
  }).post('/submit', function*(){
    var uid, ref$;
    uid == null && (uid = (ref$ = this.session.passport.user) != null ? ref$._id : void 8);
    uid == null && (uid = "roosephu");
    console.log("uid: " + uid);
    this.body = {
      status: yield db.sol.submit(this.request.body, uid)
    };
  }).get('/solution', function*(){
    this.body = {
      sols: yield db.sol.list()
    };
  }).get('/session', function*(){
    var that, ref$, ref1$;
    this.body = {
      uid: (that = (ref$ = this.session.passport) != null ? (ref1$ = ref$.user) != null ? ref1$._id : void 8 : void 8) != null ? that : void 8
    };
  }).get('/solution/:sid', function*(){
    this.body = {
      sol: yield db.sol.show(parseInt(this.params.sid))
    };
  }).get('/round', function*(){
    this.body = {
      rounds: yield db.rnd.list()
    };
  }).get('/round/next-count', function*(){
    this.body = {
      _id: yield db.rnd.nextCount()
    };
  }).get('/round/:rid', function*(){
    var rid;
    rid = parseInt(this.params.rid);
    this.body = yield db.rnd.show(rid, {
      mode: "view"
    });
  }).put('/round/:rid', function*(){
    var rid;
    rid = parseInt(this.params.rid);
    this.body = {
      status: yield db.rnd.modify(rid, this.request.body)
    };
  }).get('/round/:rid/total', function*(){
    var rid;
    rid = parseInt(this.params.rid);
    this.body = yield db.rnd.show(rid, {
      mode: "total"
    });
  })['delete']('/round/:rid', function*(){
    this.body = {
      status: yield db.rnd['delete'](this.params.rid)
    };
  }).get('/theme/:theme', function*(){
    this.session.theme = this.params.theme;
    this.body = {
      status: true
    };
  });
  app.use(privateRouter.middleware());
  console.log("Listening port 3000");
  app.listen(3000);
}).call(this);
