// Generated by LiveScript 1.3.1
(function(){
  var koa, koaJson, koaStatic, koaBodyparser, koaGenericSession, koaPassport, util, koaValidate, koaRouter, log4js, app, logger, db, publicRouter, privateRouter;
  koa = require('koa');
  koaJson = require('koa-json');
  koaStatic = require('koa-static');
  koaBodyparser = require('koa-bodyparser');
  koaGenericSession = require('koa-generic-session');
  koaPassport = require('koa-passport');
  util = require('util');
  koaValidate = require('koa-validate');
  koaRouter = require('koa-router');
  log4js = require('log4js');
  app = koa();
  logger = log4js.getLogger('dollast');
  global.runner = require('./runner');
  db = require('./db');
  if (!db) {
    logger.fatal("No Database found");
  }
  app.use(function*(next){
    console.log(this.req.method + " " + this.req.url);
    yield next;
  });
  app.keys = ['drdrd'];
  app.use(koaGenericSession({
    cookie: {
      maxAge: 1000 * 60 * 5
    }
  }));
  app.use(koaBodyparser());
  require('./auth');
  app.use(koaPassport.initialize());
  app.use(koaPassport.session());
  app.use(koaJson());
  app.use(koaStatic("public/"));
  publicRouter = new koaRouter();
  publicRouter.post('/login', koaPassport.authenticate('local', {
    successRedirect: '#/',
    failureRedirect: '/#/login'
  })).get('/logout', function*(next){
    this.logout();
    this.redirect('/#/');
  });
  app.use(publicRouter.middleware());
  /* app.use (next) ->*
    if @req.is-authenticated!
      console.log "#{util.inspect(@session)}"
      yield next
    else
      @redirect '/login' # should be login
  */
  privateRouter = new koaRouter();
  privateRouter.get('/problem', function*(){
    this.body = yield db.prob.list();
  }).get('/problem/:pid', function*(){
    this.body = yield db.prob.show(this.params.pid);
  }).post('/solution/submit', function*(){
    var that, ref$, uid;
    console.log(util.inspect(this.session) + "");
    logger.trace('submit session');
    if ((that = (ref$ = this.session.passport.user) != null ? ref$.uid : void 8) != null) {
      uid = that;
    }
    uid == null && (uid = "roosephu");
    this.body = yield db.sol.submit(this.request.body, uid);
  }).get('/solution', function*(){
    this.body = yield db.sol.list();
  });
  app.use(privateRouter.middleware());
  console.log("Listening port 3000");
  app.listen(3000);
}).call(this);
