// Generated by LiveScript 1.3.1
(function(){
  var koa, koaJson, koaStatic, koaBodyparser, koaGenericSession, koaPassport, util, koaValidate, koaRouter, log4js, koaSend, path, app, logger, db, publicRouter, privateRouter;
  koa = require('koa');
  koaJson = require('koa-json');
  koaStatic = require('koa-static');
  koaBodyparser = require('koa-bodyparser');
  koaGenericSession = require('koa-generic-session');
  koaPassport = require('koa-passport');
  util = require('util');
  koaValidate = require('koa-validate');
  koaRouter = require('koa-router');
  log4js = require('log4js');
  koaSend = require('koa-send');
  path = require('path');
  app = koa();
  logger = log4js.getLogger('dollast');
  global.runner = require('./runner');
  db = require('./db');
  if (!db) {
    logger.fatal("No Database found");
  }
  app.use(function*(next){
    console.log(this.req.method + " " + this.req.url);
    yield next;
  });
  app.keys = ['drdrd'];
  app.use(koaGenericSession({
    cookie: {
      maxAge: 1000 * 60 * 5
    }
  }));
  app.use(koaBodyparser());
  require('./auth').init(db);
  app.use(koaPassport.initialize());
  app.use(koaPassport.session());
  app.use(function*(next){
    var ref$;
    (ref$ = this.session).theme || (ref$.theme = "default");
    yield next;
  });
  app.use(koaJson());
  app.use(koaStatic("public/"));
  app.use(function*(next){
    var ref$;
    if ((ref$ = this.method) === 'HEAD' || ref$ === 'GET') {
      if (yield koaSend(this, this.path, {
        index: 'index.html',
        root: path.resolve("theme/" + this.session.theme)
      })) {
        return;
      }
    }
    yield next;
  });
  publicRouter = new koaRouter();
  publicRouter.post('/login', koaPassport.authenticate('local', {
    successRedirect: '#/',
    failureRedirect: '/#/login'
  })).get('/logout', function*(next){
    this.logout();
    this.redirect('/#/');
  });
  app.use(publicRouter.middleware());
  app.use(function*(next){
    if (true || this.req.isAuthenticated()) {
      yield next;
    } else {
      this.redirect('/login');
    }
  });
  privateRouter = new koaRouter();
  privateRouter.get('/problem', function*(){
    this.body = yield db.prob.list();
  }).get('/problem/create', function*(){
    this.body = {
      _id: yield db.prob.nextCount()
    };
  }).get('/problem/:pid', function*(){
    this.body = yield db.prob.show(parseInt(this.params.pid));
  }).get('/problem/:pid/modify', function*(){
    var pid;
    pid = parseInt(this.params.pid);
    this.body = yield db.prob.show(pid, true);
  }).put('/problem/:pid', function*(){
    this.body = yield db.prob.modify(this.params.pid, this.request.body);
  })['delete']('/problem/:pid', function*(){
    throw Error('unimplemented');
  }).post('/submit', function*(){
    var uid, ref$;
    uid == null && (uid = (ref$ = this.session.passport.user) != null ? ref$._id : void 8);
    uid == null && (uid = "roosephu");
    console.log("uid: " + uid);
    this.body = yield db.sol.submit(this.request.body, uid);
  }).get('/solution', function*(){
    this.body = yield db.sol.list();
  }).get('/session', function*(){
    var that, ref$, ref1$;
    this.body = {
      uid: (that = (ref$ = this.session.passport) != null ? (ref1$ = ref$.user) != null ? ref1$._id : void 8 : void 8) != null ? that : void 8
    };
  }).get('/solution/:sid', function*(){
    this.body = yield db.sol.show(parseInt(this.params.sid));
  }).get('/round', function*(){
    this.body = yield db.rnd.list();
  }).get('/round/create', function*(){
    this.body = {
      _id: yield db.rnd.nextCount()
    };
  }).get('/round/:rid', function*(){
    this.body = yield db.rnd.show(parseInt(this.params.rid));
  }).put('/round/:rid', function*(){
    var rid;
    rid = parseInt(this.params.rid);
    this.body = yield db.rnd.modify(rid, this.request.body);
  }).get('/round/:rid/modify', function*(){
    var rid;
    rid = parseInt(this.params.rid);
    this.body = yield db.rnd.show(rid, true);
  })['delete']('/round/:rid', function*(){
    this.body = yield db.rnd['delete'](this.params.rid);
  }).get('/theme/:theme', function*(){
    this.session.theme = this.params.theme;
    this.body = {
      result: true
    };
  });
  app.use(privateRouter.middleware());
  console.log("Listening port 3000");
  app.listen(3000);
}).call(this);
