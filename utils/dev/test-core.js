// Generated by LiveScript 1.3.1
(function(){
  var debug, co, util, bluebird, async, log, src, lang, task, f;
  debug = require('debug');
  co = require('co');
  util = require('util');
  bluebird = require('bluebird');
  async = require('async');
  async = bluebird.promisifyAll(async);
  log = debug('test-core');
  src = '#include <iostream>\nusing namespace std;\n\nint main() {\n  int A, B;\n  cin >> A >> B;\n  cout << A + B << endl;\n  return 0;\n}';
  lang = 'C++';
  /*
  core.compile lang, src .then (val) ->
    console.log "val: #{util.inspect val}"
  .catch (err) ->
    console.log err
  */
  task = [
    function(){
      return 1;
    }, function(){
      return 2;
    }, function(){
      return 3;
    }
  ];
  f = co.co(function*(){
    var result;
    result = yield async.parallelLimitAsync(task, 2);
    log(result);
  });
  f['catch'](function(err){
    return log(err);
  });
}).call(this);
