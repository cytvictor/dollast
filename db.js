// Generated by LiveScript 1.3.1
(function(){
  var mongoose, mongooseDeepPopulate, mongooseAutoIncrement, log4js, util, logger, ObjectID, conn, solModel, probModel, userModel, sol, prob, user, out$ = typeof exports != 'undefined' && exports || this;
  mongoose = require('mongoose');
  mongooseDeepPopulate = require('mongoose-deep-populate');
  mongooseAutoIncrement = require('mongoose-auto-increment');
  log4js = require('log4js');
  util = require('util');
  logger = log4js.getLogger();
  ObjectID = mongoose.Schema.Types.ObjectID;
  out$.conn = conn = mongoose.createConnection('mongodb://localhost/dollast');
  mongooseAutoIncrement.initialize(conn);
  mongoose.plugin(mongooseDeepPopulate);
  solModel = (function(){
    solModel.displayName = 'solModel';
    var prototype = solModel.prototype, constructor = solModel;
    function solModel(){
      this.list = bind$(this, 'list', prototype);
      this.submit = bind$(this, 'submit', prototype);
      this.schema = new mongoose.Schema({
        code: String,
        time: Number,
        space: Number,
        lang: String,
        result: String,
        prob: {
          type: Number,
          ref: "problem"
        },
        user: {
          type: String,
          ref: "user"
        }
      });
      this.schema.plugin(mongooseAutoIncrement.plugin);
      this.model = conn.model('solution', this.schema);
    }
    prototype.submit = function*(req, uid){
      var res, sol;
      logger.trace("submit problem " + util.inspect(req));
      res = runner.run(req.lang, req.code);
      sol = new this.model({
        code: req.code,
        time: res.time,
        space: res.space,
        lang: req.lang,
        prob: req.pid,
        user: uid,
        result: res.result
      });
      sol.save(function(err, sol){
        if (err) {
          return;
        }
        return logger.trace("Current solution: " + util.inspect(sol));
      });
    };
    prototype.list = function*(){
      var sols;
      sols = yield this.model.find({}, '-code').populate('prob', 'title').exec();
      return sols;
    };
    return solModel;
  }());
  probModel = (function(){
    probModel.displayName = 'probModel';
    var prototype = probModel.prototype, constructor = probModel;
    function probModel(){
      this.model = conn.model('problem', {
        _id: Number,
        desc: String,
        title: String,
        timeLmt: Number,
        spaceLmt: Number,
        sampleIn: String,
        sampleOut: String,
        stat: {}
      });
    }
    prototype.show = function*(pid){
      var prob;
      logger.trace("query problem " + pid);
      prob = yield this.model.findOne().where('_id').equals(pid).exec();
      return prob;
    };
    prototype.list = function*(){
      var probs;
      probs = yield this.model.find({}, 'id title stat').exec();
      return probs;
    };
    return probModel;
  }());
  userModel = (function(){
    userModel.displayName = 'userModel';
    var prototype = userModel.prototype, constructor = userModel;
    function userModel(){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.query = bind$(this$, 'query', prototype);
      this$.model = conn.model('user', {
        _id: String,
        pswd: String
      });
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.query = function(uid, pswd, done){
      return this.model.findById(uid, function(err, user){
        if (err) {
          return done(err);
        } else if (!user || user.pswd !== pswd) {
          console.log('No such user');
          return done(null, false);
        } else {
          console.log('authenticate OK');
          return done(null, user);
        }
      });
    };
    return userModel;
  }());
  out$.sol = sol = new solModel;
  out$.prob = prob = new probModel;
  out$.user = user = new userModel();
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
