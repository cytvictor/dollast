// Generated by LiveScript 1.4.0
(function(){
  var koa, koaJson, koaStatic, koaBodyparser, koaGenericSession, koaConditionalGet, koaValidate, koaRouter, koaJade, koaSend, koaEtag, koaJwt, util, path, fs, debug, _, config, db, crypt, app, log, routers, out$ = typeof exports != 'undefined' && exports || this;
  koa = require('koa');
  koaJson = require('koa-json');
  koaStatic = require('koa-static');
  koaBodyparser = require('koa-bodyparser');
  koaGenericSession = require('koa-generic-session');
  koaConditionalGet = require('koa-conditional-get');
  koaValidate = require('koa-validate');
  koaRouter = require('koa-router');
  koaJade = require('koa-jade');
  koaSend = require('koa-send');
  koaEtag = require('koa-etag');
  koaJwt = require('koa-jwt');
  util = require('util');
  path = require('path');
  fs = require('fs');
  debug = require('debug');
  _ = require('prelude-ls');
  config = require('./config');
  db = require('./db');
  crypt = require('./crypt');
  out$.app = app = koa();
  log = debug('dollast:server');
  if (!db) {
    log("No Database found");
  }
  app.use(koaConditionalGet());
  app.use(koaEtag());
  app.use(koaJson());
  app.use(koaValidate());
  app.use(koaJwt({
    secret: config.jwtKey,
    passthrough: true
  }));
  app.keys = config.keys;
  app.use(function*(next){
    return (yield next);
  });
  app.use(koaBodyparser({
    extendTypes: {
      json: ['application/x-javascript'],
      multipart: ['multipart/form-data']
    }
  }));
  app.use(function*(next){
    var that, ref$, ref1$, content, data;
    if (that = (ref$ = this.state) != null ? (ref1$ = ref$.user) != null ? ref1$.server : void 8 : void 8) {
      this.state.user = JSON.parse(crypt.AES.dec(that, config.serverAESKey));
      log('encrypted data in header.server', this.state.user);
    } else {
      (this.state || (this.state = {})).user = {};
    }
    content = this.request.body.signed;
    if (content) {
      content = koaJwt.decode(content);
      data = crypt.RSA.dec(content.content);
      if (this.state.user.user && this.state.user.clientKey !== data.clientKey) {
        throw new Error('wrong client-key');
      }
      this.request.body = data;
      log('verified encrypted data found in body.', this.request.body);
    }
    return (yield next);
  });
  app.use(function*(next){
    var e;
    try {
      log(this.req.method + " " + this.req.url);
      (yield next);
    } catch (e$) {
      e = e$;
      log("catched error:");
      log(e);
      this.status = e.status || 400;
      this.body = [{
        error: e.message
      }];
    }
    if (this.errors) {
      this.status = 400;
      return this.body = this.errors;
    }
  });
  app.use(function*(next){
    this.check = function(obj, key, errMsg){
      if (!obj) {
        if (!this.errors) {
          this.errors = [];
        }
        this.errors.push(errMsg + "");
        return new koaValidate.Validator(this, null, null, false, null, false);
      } else {
        return new koaValidate.Validator(this, key, obj[key], obj[key] != null, obj);
      }
    };
    return (yield next);
  });
  app.use(function*(next){
    var ref$, i$, len$, folders;
    db.bindCtx(this);
    (ref$ = this.state.user).theme || (ref$.theme = config['default'].theme);
    (ref$ = this.state.user).priv || (ref$.priv = config['default'].priv);
    if ((ref$ = this.method) === 'HEAD' || ref$ === 'GET') {
      for (i$ = 0, len$ = (ref$ = ["public", "theme/" + this.state.user.theme]).length; i$ < len$; ++i$) {
        folders = ref$[i$];
        if ((yield koaSend(this, this.path, {
          index: 'index.html',
          maxAge: 864000000,
          root: path.resolve(folders)
        }))) {
          return;
        }
      }
    }
    return (yield next);
  });
  routers = require('./routers');
  app.use(routers.router);
  console.log("Listening port 8888");
  app.listen(8888);
}).call(this);
