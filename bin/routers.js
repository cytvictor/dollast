// Generated by LiveScript 1.3.1
var koaRouter, debug, util, path, coBusboy, bluebird, config, core, tmp, db, log, dataCtrl, probCtrl, solCtrl, rndCtrl, siteCtrl, paramsValidator, router, privateRouter, out$ = typeof exports != 'undefined' && exports || this;
koaRouter = require('koa-router');
debug = require('debug');
util = require('util');
path = require('path');
coBusboy = require('co-busboy');
bluebird = require('bluebird');
config = require('./config');
core = require('./core');
tmp = bluebird.promisifyAll(require('tmp'));
db = config.db;
log = debug('router');
dataCtrl = {
  upload: function*(){
    var pid, parts, part;
    pid = this.params.pid;
    parts = coBusboy(this, {
      autoFields: true
    });
    while (part = yield parts) {
      this.body = yield core.upload(pid, part);
    }
    yield db.prob.updData(pid);
  },
  'delete': function*(){
    throw Error('unimplemented');
  },
  show: function*(){
    var data;
    data = yield db.prob.listDataset(this.params.pid);
    this.body = data;
  }
};
probCtrl = {
  list: function*(){
    this.body = yield db.prob.list();
    log("prob-list " + this.body);
  },
  nextCount: function*(){
    this.body = {
      _id: yield db.prob.nextCount()
    };
  },
  show: function*(){
    this.body = yield db.prob.show(this.params.pid, {
      mode: "view"
    });
    console.log("body: " + util.inspect(this.body));
  },
  total: function*(){
    this.body = yield db.prob.show(this.params.pid, {
      mode: "total"
    });
  },
  save: function*(){
    this.body = yield db.prob.modify(this.params.pid, this.request.body);
  },
  'delete': function*(){
    throw Error('unimplemented');
  }
};
solCtrl = {
  submit: function*(){
    var uid, ref$;
    uid == null && (uid = (ref$ = this.session.passport.user) != null ? ref$._id : void 8);
    this.body = {
      status: yield db.sol.submit(this.request.body, uid)
    };
  },
  list: function*(){
    this.body = yield db.sol.list();
  },
  show: function*(){
    this.body = yield db.sol.show(this.params.sid);
  }
};
rndCtrl = {
  list: function*(){
    this.body = yield db.rnd.list();
  },
  nextCount: function*(){
    this.body = {
      _id: yield db.rnd.nextCount()
    };
  },
  show: function*(){
    this.body = yield db.rnd.show(this.params.rid, {
      mode: "view"
    });
  },
  save: function*(){
    this.body = {
      status: yield db.rnd.modify(this.params.rid, this.request.body)
    };
  },
  total: function*(){
    this.body = yield db.rnd.show(this.params.rid, {
      mode: "total"
    });
  },
  'delete': function*(){
    this.body = {
      status: yield db.rnd['delete'](this.params.rid)
    };
  }
};
siteCtrl = {
  theme: function*(){
    this.session.theme = this.params.theme;
    this.body = {
      status: true
    };
  },
  loginToken: function*(){
    throw Error('unimplemented');
    this.body = this.session.loginToken = 1;
  },
  session: function*(){
    var that, ref$, ref1$;
    this.body = {
      uid: (that = (ref$ = this.session.passport) != null ? (ref1$ = ref$.user) != null ? ref1$._id : void 8 : void 8) != null ? that : void 8
    };
  }
};
paramsValidator = {
  pid: function*(pid, next){
    this.params.pid = parseInt(pid);
    yield next;
  },
  sid: function*(sid, next){
    this.params.sid = parseInt(sid);
    yield next;
  },
  rid: function*(rid, next){
    this.params.rid = parseInt(rid);
    yield next;
  }
};
router = new koaRouter();
router.param('pid', paramsValidator.pid).param('sid', paramsValidator.sid).param('rid', paramsValidator.rid).get('/problem', probCtrl.list).get('/problem/next-count', probCtrl.nextCount).get('/problem/:pid', probCtrl.show).get('/problem/:pid/total', probCtrl.total).post('/problem/:pid', probCtrl.save)['delete']('/problem/:pid', probCtrl['delete']).get('/data/:pid', dataCtrl.show).post('/data/:pid/upload', dataCtrl.upload).post('/solution/submit', solCtrl.submit).get('/solution', solCtrl.list).get('/solution/:sid', solCtrl.show).get('/round', rndCtrl.list).get('/round/next-count', rndCtrl.nextCount).get('/round/:rid', rndCtrl.show).post('/round/:rid', rndCtrl.save).get('/round/:rid/total', rndCtrl.total)['delete']('/round/:rid', rndCtrl['delete']).get('/site/theme/:theme', siteCtrl.theme).get('/site/session', siteCtrl.session).get('/site/session/login-token', siteCtrl.loginToken);
out$.privateRouter = privateRouter = router.middleware();