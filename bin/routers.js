// Generated by LiveScript 1.3.1
var koaRouter, koaJwt, debug, util, path, coBusboy, bluebird, _, config, core, db, tmp, log, dataCtrl, probCtrl, imageCtrl, solCtrl, rndCtrl, siteCtrl, userCtrl, paramsValidator, regPriv, router, out$ = typeof exports != 'undefined' && exports || this;
koaRouter = require('koa-router');
koaJwt = require('koa-jwt');
debug = require('debug');
util = require('util');
path = require('path');
coBusboy = require('co-busboy');
bluebird = require('bluebird');
_ = require('prelude-ls');
config = require('./config');
core = require('./core');
db = require('./db');
tmp = bluebird.promisifyAll(require('tmp'));
log = debug('dollast:router');
dataCtrl = {
  upload: function*(){
    var pid, parts, part;
    pid = this.params.pid;
    parts = coBusboy(this, {
      autoFields: true
    });
    while (part = yield parts) {
      this.body = yield core.upload(pid, part);
    }
    yield db.prob.updData(pid);
    this.body.status = {
      type: "ok",
      msg: "upload successful"
    };
  },
  'delete': function*(){
    var pid;
    pid = this.params.pid;
    yield core.deleteTestData(pid, this.params.file);
    this.body = {
      status: {
        type: "ok",
        msg: "data has been deleted"
      }
    };
  },
  show: function*(){
    var data;
    data = yield db.prob.listDataset(this.params.pid);
    this.body = data;
  }
};
probCtrl = {
  list: function*(){
    this.body = yield db.prob.list(this.query);
    log("prob-list " + this.body);
  },
  nextCount: function*(){
    this.body = {
      _id: yield db.prob.nextCount()
    };
  },
  show: function*(){
    this.body = yield db.prob.show(this.params.pid, {
      mode: "view"
    });
  },
  total: function*(){
    this.body = yield db.prob.show(this.params.pid, {
      mode: "total"
    });
  },
  brief: function*(){
    this.body = yield db.prob.show(this.params.pid, {
      mode: "brief"
    });
  },
  save: function*(){
    this.body = yield db.prob.modify(this.params.pid, this.request.body);
    this.body.status = {
      type: "ok",
      msg: "problem has been saved"
    };
  },
  'delete': function*(){
    throw Error('unimplemented');
  },
  repair: function*(){
    yield db.prob.updData(this.params.pid);
    this.body = {
      status: {
        type: "ok",
        msg: "repaired all data"
      }
    };
  },
  stat: function*(){
    this.body = yield db.prob.stat(this.params.pid);
  }
};
imageCtrl = {
  upload: function*(){
    var parts, part;
    parts = coBusboy(this, {
      autoFields: true
    });
    while (part = yield parts) {
      this.body = {
        link: yield core.uploadImage(part)
      };
    }
    log(this.body);
  }
};
solCtrl = {
  submit: function*(){
    var uid;
    uid = this.user._id;
    yield db.sol.submit(this.request.body, uid);
    this.body = {
      status: {
        type: "ok",
        msg: "solution submited successfully"
      }
    };
  },
  list: function*(){
    this.body = yield db.sol.list(this.query);
  },
  show: function*(){
    this.body = yield db.sol.show(this.params.sid);
  },
  toggle: function*(){
    this.body = yield db.sol.toggle(this.params.sid);
    this.body.status = {
      type: "ok",
      msg: "solution toggled"
    };
  }
};
rndCtrl = {
  list: function*(){
    this.body = yield db.rnd.list();
  },
  nextCount: function*(){
    this.body = {
      _id: yield db.rnd.nextCount()
    };
  },
  show: function*(){
    this.body = yield db.rnd.show(this.params.rid, {
      mode: "view"
    });
  },
  save: function*(){
    yield db.rnd.modify(this.params.rid, this.request.body);
    this.body = {
      status: {
        type: "ok",
        msg: "round saved"
      }
    };
  },
  total: function*(){
    this.body = yield db.rnd.show(this.params.rid, {
      mode: "total"
    });
  },
  'delete': function*(){
    yield db.rnd['delete'](this.params.rid);
    this.body = {
      status: {
        type: "ok",
        msg: "round has been deleted"
      }
    };
  },
  board: function*(){
    var rid;
    rid = this.params.rid;
    this.body = yield db.rnd.board(rid);
  }
};
siteCtrl = {
  theme: function*(){
    this.session.theme = this.params.theme;
    this.body = {
      status: true
    };
  },
  loginToken: function*(){
    throw Error('unimplemented');
    this.body = this.session.loginToken = 1;
  },
  session: function*(){
    var that, ref$, ref1$;
    log(this.session);
    this.body = {
      uid: (that = (ref$ = this.session.passport) != null ? (ref1$ = ref$.user) != null ? ref1$._id : void 8 : void 8) != null ? that : void 8
    };
  },
  login: function*(){
    var user, privList, i, claims, token;
    user = yield db.user.query(this.request.body);
    if (!user) {
      this.body = {
        status: {
          type: "err",
          msg: "bad user/password combination"
        }
      };
    } else {
      privList = user.privList;
      privList.push('login');
      this.session.priv = _.listsToObj(privList, (function(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = privList.length; i$ <= to$; ++i$) {
          i = i$;
          results$.push(true);
        }
        return results$;
      }()));
      claims = {
        _id: user._id
      };
      token = koaJwt.sign(claims, config.secret, {
        expiresInSeconds: 10
      });
      this.body = {
        token: token,
        status: {
          type: "ok",
          msg: "login successfully"
        }
      };
    }
  },
  logout: function*(){
    throw Error('unimplemented');
  }
};
userCtrl = {
  show: function*(){
    this.body = yield db.user.show(this.params.uid);
  },
  save: function*(){
    yield db.user.modify(this.request.body);
    this.body = {
      status: {
        type: "ok",
        msg: "user profile saved"
      }
    };
  },
  register: function*(){
    yield db.user.register(this.request.body);
    this.body = {
      status: {
        type: "ok",
        msg: "registering successfully"
      }
    };
  },
  profile: function*(){
    this.body = yield db.user.profile(this.params.uid);
  }
};
paramsValidator = {
  pid: function*(pid, next){
    this.params.pid = parseInt(pid);
    yield next;
  },
  sid: function*(sid, next){
    this.params.sid = parseInt(sid);
    yield next;
  },
  rid: function*(rid, next){
    this.params.rid = parseInt(rid);
    yield next;
  }
};
regPriv = function(func){
  return function*(){
    var err;
    try {
      yield func.call(this);
    } catch (e$) {
      err = e$;
      log(err);
    }
  };
};
router = new koaRouter();
router.param('pid', paramsValidator.pid).param('sid', paramsValidator.sid).param('rid', paramsValidator.rid).get('/problem', regPriv(probCtrl.list)).get('/problem/next-count', regPriv(probCtrl.nextCount)).get('/problem/:pid', regPriv(probCtrl.show)).get('/problem/:pid/brief', regPriv(probCtrl.brief)).get('/problem/:pid/total', regPriv(probCtrl.total)).get('/problem/:pid/repair', regPriv(probCtrl.repair)).get('/problem/:pid/stat', regPriv(probCtrl.stat)).post('/problem/:pid', regPriv(probCtrl.save))['delete']('/problem/:pid', regPriv(probCtrl['delete'])).get('/data/:pid', regPriv(dataCtrl.show)).post('/data/:pid/upload', regPriv(dataCtrl.upload))['delete']('/data/:pid/:file', regPriv(dataCtrl['delete'])).post('/solution/submit', regPriv(solCtrl.submit)).get('/solution', regPriv(solCtrl.list)).get('/solution/:sid', regPriv(solCtrl.show)).post('/solution/:sid/toggle', regPriv(solCtrl.toggle)).get('/round', regPriv(rndCtrl.list)).get('/round/next-count', regPriv(rndCtrl.nextCount)).get('/round/:rid', regPriv(rndCtrl.show)).post('/round/:rid', regPriv(rndCtrl.save)).get('/round/:rid/total', regPriv(rndCtrl.total))['delete']('/round/:rid', regPriv(rndCtrl['delete'])).get('/round/:rid/board', regPriv(rndCtrl.board)).get('/site/theme/:theme', regPriv(siteCtrl.theme)).get('/site/session', regPriv(siteCtrl.session)).get('/site/session/login-token', regPriv(siteCtrl.loginToken)).post('/site/login', regPriv(siteCtrl.login)).post('/site/logout', regPriv(siteCtrl.logout)).get('/user/:uid/profile', regPriv(userCtrl.show)).post('/user/register/', regPriv(userCtrl.register)).post('/user/:uid/modify', regPriv(userCtrl.save)).post('/image/upload', regPriv(imageCtrl.upload));
out$.router = router = router.middleware();