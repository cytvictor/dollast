// Generated by LiveScript 1.3.1
(function(){
  var koaRouter, koaJwt, debug, util, path, coBusboy, bluebird, _, config, core, db, tmp, log, dataCtrl, probCtrl, imageCtrl, solCtrl, rndCtrl, siteCtrl, userCtrl, paramsValidator, regPriv, router, out$ = typeof exports != 'undefined' && exports || this;
  koaRouter = require('koa-router');
  koaJwt = require('koa-jwt');
  debug = require('debug');
  util = require('util');
  path = require('path');
  coBusboy = require('co-busboy');
  bluebird = require('bluebird');
  _ = require('prelude-ls');
  config = require('./config');
  core = require('./core');
  db = require('./db');
  tmp = bluebird.promisifyAll(require('tmp'));
  log = debug('router');
  dataCtrl = {
    upload: function*(){
      var pid, parts, part;
      pid = this.params.pid;
      parts = coBusboy(this, {
        autoFields: true
      });
      while (part = yield parts) {
        this.body = yield core.upload(pid, part);
      }
      yield db.prob.updData(pid);
    },
    'delete': function*(){
      throw Error('unimplemented');
    },
    show: function*(){
      var data;
      data = yield db.prob.listDataset(this.params.pid);
      this.body = data;
    }
  };
  probCtrl = {
    list: function*(){
      this.body = yield db.prob.list(this.query);
      log("prob-list " + this.body);
    },
    nextCount: function*(){
      this.body = {
        _id: yield db.prob.nextCount()
      };
    },
    show: function*(){
      this.body = yield db.prob.show(this.params.pid, {
        mode: "view"
      });
      console.log("body: " + util.inspect(this.body));
    },
    total: function*(){
      this.body = yield db.prob.show(this.params.pid, {
        mode: "total"
      });
    },
    save: function*(){
      this.body = yield db.prob.modify(this.params.pid, this.request.body);
    },
    'delete': function*(){
      throw Error('unimplemented');
    }
  };
  imageCtrl = {
    upload: function*(){
      var parts, part;
      parts = coBusboy(this, {
        autoFields: true
      });
      while (part = yield parts) {
        this.body = {
          link: yield core.uploadImage(part)
        };
      }
      log(this.body);
    }
  };
  solCtrl = {
    submit: function*(){
      var uid;
      uid = this.user._id;
      this.body = {
        status: yield db.sol.submit(this.request.body, uid)
      };
    },
    list: function*(){
      this.body = yield db.sol.list(this.query);
    },
    show: function*(){
      this.body = yield db.sol.show(this.params.sid);
    },
    toggle: function*(){
      this.body = yield db.sol.toggle(this.params.sid);
    }
  };
  rndCtrl = {
    list: function*(){
      this.body = yield db.rnd.list();
    },
    nextCount: function*(){
      this.body = {
        _id: yield db.rnd.nextCount()
      };
    },
    show: function*(){
      this.body = yield db.rnd.show(this.params.rid, {
        mode: "view"
      });
    },
    save: function*(){
      this.body = {
        status: yield db.rnd.modify(this.params.rid, this.request.body)
      };
    },
    total: function*(){
      this.body = yield db.rnd.show(this.params.rid, {
        mode: "total"
      });
    },
    'delete': function*(){
      this.body = {
        status: yield db.rnd['delete'](this.params.rid)
      };
    }
  };
  siteCtrl = {
    theme: function*(){
      this.session.theme = this.params.theme;
      this.body = {
        status: true
      };
    },
    loginToken: function*(){
      throw Error('unimplemented');
      this.body = this.session.loginToken = 1;
    },
    session: function*(){
      var that, ref$, ref1$;
      log(this.session);
      this.body = {
        uid: (that = (ref$ = this.session.passport) != null ? (ref1$ = ref$.user) != null ? ref1$._id : void 8 : void 8) != null ? that : void 8
      };
    },
    login: function*(){
      var user, privList, i, claims, token;
      user = yield db.user.query(this.request.body);
      if (!user) {
        this.body = {
          status: "invalid"
        };
      } else {
        privList = user.privList;
        privList.push('login');
        this.session.priv = _.listsToObj(privList, (function(){
          var i$, to$, results$ = [];
          for (i$ = 1, to$ = privList.length; i$ <= to$; ++i$) {
            i = i$;
            results$.push(true);
          }
          return results$;
        }()));
        claims = {
          _id: user._id
        };
        token = koaJwt.sign(claims, config.secret, {
          expireInMinutes: 1
        });
        this.body = {
          token: token,
          status: "OK"
        };
      }
    },
    logout: function*(){
      throw Error('unimplemented');
    }
  };
  userCtrl = {
    show: function*(){
      this.body = yield db.user.show(this.params.uid);
    },
    save: function*(){
      this.body = {
        status: yield db.user.modify(this.request.body)
      };
    },
    register: function*(){
      this.body = {
        status: yield db.user.register(this.request.body)
      };
    }
  };
  paramsValidator = {
    pid: function*(pid, next){
      this.params.pid = parseInt(pid);
      yield next;
    },
    sid: function*(sid, next){
      this.params.sid = parseInt(sid);
      yield next;
    },
    rid: function*(rid, next){
      this.params.rid = parseInt(rid);
      yield next;
    }
  };
  regPriv = function(func){
    return function*(){
      var err;
      try {
        yield func.call(this);
      } catch (e$) {
        err = e$;
        log(err.message);
      }
    };
  };
  router = new koaRouter();
  router.param('pid', paramsValidator.pid).param('sid', paramsValidator.sid).param('rid', paramsValidator.rid).get('/problem', regPriv(probCtrl.list)).get('/problem/next-count', regPriv(probCtrl.nextCount)).get('/problem/:pid', regPriv(probCtrl.show)).get('/problem/:pid/total', regPriv(probCtrl.total)).post('/problem/:pid', regPriv(probCtrl.save))['delete']('/problem/:pid', regPriv(probCtrl['delete'])).get('/data/:pid', regPriv(dataCtrl.show)).post('/data/:pid/upload', regPriv(dataCtrl.upload)).post('/solution/submit', regPriv(solCtrl.submit)).get('/solution', regPriv(solCtrl.list)).get('/solution/:sid', regPriv(solCtrl.show)).post('/solution/:sid/toggle', regPriv(solCtrl.toggle)).get('/round', regPriv(rndCtrl.list)).get('/round/next-count', regPriv(rndCtrl.nextCount)).get('/round/:rid', regPriv(rndCtrl.show)).post('/round/:rid', regPriv(rndCtrl.save)).get('/round/:rid/total', regPriv(rndCtrl.total))['delete']('/round/:rid', regPriv(rndCtrl['delete'])).get('/site/theme/:theme', regPriv(siteCtrl.theme)).get('/site/session', regPriv(siteCtrl.session)).get('/site/session/login-token', regPriv(siteCtrl.loginToken)).post('/site/login', regPriv(siteCtrl.login)).post('/site/logout', regPriv(siteCtrl.logout)).get('/user/:uid/profile', regPriv(userCtrl.show)).post('/user/register/', regPriv(userCtrl.register)).post('/user/:uid/modify', regPriv(userCtrl.save)).post('/image/upload', regPriv(imageCtrl.upload));
  out$.router = router = router.middleware();
}).call(this);
