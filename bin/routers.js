// Generated by LiveScript 1.3.1
var koaRouter, debug, config, util, db, log, dataset, probCtrl, solCtrl, rndCtrl, siteCtrl, router, privateRouter, out$ = typeof exports != 'undefined' && exports || this;
koaRouter = require('koa-router');
debug = require('debug');
config = require('./config');
util = require('util');
db = config.db;
log = debug('router');
dataset = {
  getTmpDir: function*(){}
};
probCtrl = {
  list: function*(){
    this.body = yield db.prob.list();
  },
  nextCount: function*(){
    this.body = {
      _id: yield db.prob.nextCount()
    };
  },
  show: function*(){
    var pid;
    pid = this.params.pid;
    this.body = yield db.prob.show(pid, {
      mode: "view"
    });
    console.log("body: " + util.inspect(this.body));
  },
  total: function*(){
    var pid;
    pid = parseInt(this.params.pid);
    this.body = yield db.prob.show(pid, {
      mode: "total"
    });
  },
  save: function*(){
    this.body = yield db.prob.modify(this.params.pid, this.request.body);
  },
  upload: function*(){
    var pid, parts, part;
    pid = parseInt(this.params.pid);
    parts = coBusboy(this, {
      autoFields: true
    });
    while (part = yield parts) {
      console.log("filename: " + part.filename);
      part.pipe(fs.createWriteStream("upload/" + part.filename));
    }
    console.log("done");
    this.body = {
      status: true
    };
  },
  'delete': function*(){
    throw Error('unimplemented');
  }
};
solCtrl = {
  submit: function*(){
    var uid, ref$;
    uid == null && (uid = (ref$ = this.session.passport.user) != null ? ref$._id : void 8);
    this.body = {
      status: yield db.sol.submit(this.request.body, uid)
    };
  },
  list: function*(){
    this.body = yield db.sol.list();
  },
  show: function*(){
    this.body = yield db.sol.show(parseInt(this.params.sid));
  }
};
rndCtrl = {
  list: function*(){
    this.body = yield db.rnd.list();
  },
  nextCount: function*(){
    this.body = {
      _id: yield db.rnd.nextCount()
    };
  },
  show: function*(){
    var rid;
    rid = parseInt(this.params.rid);
    this.body = yield db.rnd.show(rid, {
      mode: "view"
    });
  },
  save: function*(){
    var rid;
    rid = parseInt(this.params.rid);
    this.body = {
      status: yield db.rnd.modify(rid, this.request.body)
    };
  },
  total: function*(){
    var rid;
    rid = parseInt(this.params.rid);
    this.body = yield db.rnd.show(rid, {
      mode: "total"
    });
  },
  'delete': function*(){
    this.body = {
      status: yield db.rnd['delete'](this.params.rid)
    };
  }
};
siteCtrl = {
  theme: function*(){
    this.session.theme = this.params.theme;
    this.body = {
      status: true
    };
  },
  loginToken: function*(){
    throw Error('unimplemented');
    this.body = this.session.loginToken = 1;
  },
  session: function*(){
    var that, ref$, ref1$;
    this.body = {
      uid: (that = (ref$ = this.session.passport) != null ? (ref1$ = ref$.user) != null ? ref1$._id : void 8 : void 8) != null ? that : void 8
    };
  }
};
router = new koaRouter();
router.get('/problem', probCtrl.list).get('/problem/next-count', probCtrl.nextCount).get('/problem/:pid', probCtrl.show).get('/problem/:pid/total', probCtrl.total).post('/problem/:pid', probCtrl.save).post('/problem/:pid/upload', probCtrl.upload)['delete']('/problem/:pid', probCtrl['delete']).post('/solution/submit', solCtrl.submit).get('/solution', solCtrl.list).get('/solution/:sid', solCtrl.show).get('/round', rndCtrl.list).get('/round/next-count', rndCtrl.nextCount).get('/round/:rid', rndCtrl.show).post('/round/:rid', rndCtrl.save).get('/round/:rid/total', rndCtrl.total)['delete']('/round/:rid', rndCtrl['delete']).get('/site/theme/:theme', siteCtrl.theme).get('/site/session', siteCtrl.session).get('/site/session/login-token', siteCtrl.loginToken);
out$.privateRouter = privateRouter = router.middleware();