// Generated by LiveScript 1.3.1
var mongoose, mongooseAutoIncrement, conn, core, schema, model, count, out$ = typeof exports != 'undefined' && exports || this, this$ = this;
mongoose = require('mongoose');
mongooseAutoIncrement = require('mongoose-auto-increment');
conn = require('./conn');
core = require('./../core');
schema = new mongoose.Schema({
  open: Boolean,
  code: String,
  lang: String,
  prob: {
    type: Number,
    ref: "problem"
  },
  user: {
    type: String,
    ref: "user"
  },
  round: {
    type: Number,
    ref: "round"
  },
  maxTime: Number,
  maxSpace: Number,
  score: Number,
  results: [{
    time: Number,
    space: Number,
    message: String,
    score: Number,
    status: String,
    input: String
  }]
});
schema.plugin(mongooseAutoIncrement.plugin, {
  model: "solution"
});
model = conn.conn.model('solution', schema);
count = 0;
import$(out$, {
  submit: function*(req, uid){
    var sol, body;
    this.acquirePrivilege('login');
    sol = new model({
      code: req.code,
      lang: req.lang,
      prob: req.pid,
      user: uid
    });
    yield sol.save();
    yield sol.populate('prob', 'config').execPopulate();
    body = {
      status: 'OK'
    };
    core.judge(req.lang, req.code, sol.prob.config, sol);
  },
  list: function*(){
    return yield model.find({}, '-code -results').populate('prob', 'outlook.title').lean().exec();
  },
  show: function*(sid){
    var sol;
    sol = yield model.findById(sid).populate('prob', 'outlook.title').lean().exec();
    if (!sol.open && sol.user !== this$.getCurrentUser._id) {
      this$.acquirePrivilege('sol-all');
    }
    return sol;
  },
  toggle: function*(sid){
    var sol;
    sol = yield model.findById(sid).exec();
    if (sol.user !== this.getCurrentUser._id) {
      this.acquirePrivilege('sol-all');
    }
    sol.open = !sol.open;
    yield sol.save();
    return {
      open: sol.open
    };
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}