// Generated by LiveScript 1.3.1
(function(){
  var mongoose, mongooseAutoIncrement, debug, moment, conn, permitSchema, db, core, config, atomResultSchema, schema, model, count, log, submit, list, show, toggle, out$ = typeof exports != 'undefined' && exports || this, this$ = this;
  mongoose = require('mongoose');
  mongooseAutoIncrement = require('mongoose-auto-increment');
  debug = require('debug');
  moment = require('moment');
  conn = require('./conn');
  permitSchema = require('./permit').schema;
  db = require('../db');
  core = require('../core');
  config = require('../config');
  atomResultSchema = new mongoose.Schema({
    _id: false,
    time: Number,
    space: Number,
    message: String,
    score: Number,
    status: String,
    input: String,
    output: String,
    weight: Number
  });
  schema = new mongoose.Schema({
    code: String,
    lang: String,
    prob: {
      type: Number,
      ref: "problem"
    },
    user: {
      type: String,
      ref: "user"
    },
    round: {
      type: Number,
      ref: "round"
    },
    final: {
      time: Number,
      space: Number,
      message: String,
      score: Number,
      status: String,
      input: String,
      output: String,
      weight: Number
    },
    results: [atomResultSchema],
    permit: permitSchema
  });
  schema.plugin(mongooseAutoIncrement.plugin, {
    model: "solution"
  });
  schema.index({
    round: 1,
    prob: 1,
    user: 1,
    _id: -1
  });
  schema.index({
    prob: 1,
    user: 1,
    "final.score": -1
  });
  schema.index({
    user: 1,
    prob: 1,
    round: 1,
    "final.score": -1
  });
  out$.model = model = conn.conn.model('solution', schema);
  count = 0;
  log = debug('dollast:sol');
  out$.submit = submit = function*(req, uid){
    var sol, prob, that, body;
    this.ensureAccess(model, 0, 'x');
    sol = new model({
      code: req.code,
      lang: req.lang,
      prob: req.pid,
      user: uid,
      final: {
        status: "running"
      }
    });
    prob = yield db.prob.model.findById(req.pid, 'config').exec();
    if (!prob) {
      throw new Error('no problem found. ');
    }
    if (that = prob.config.round) {
      sol.round = that;
      yield prob.populate('config.round', 'begTime').execPopulate();
      if (!prob.config.round.isStarted()) {
        this.acquirePrivilege('prob-all');
      }
    }
    yield sol.save();
    body = {
      status: 'OK'
    };
    core.judge(req.lang, req.code, prob.config, sol);
  };
  out$.list = list = function*(opts){
    var newOpts, query, that, solList, user, currentTime, i$, len$, sol;
    newOpts = {};
    importAll$(newOpts, config.solListOpts);
    importAll$(newOpts, opts);
    opts = newOpts;
    query = model.find({}, '-code -results').populate('prob', 'outlook.title').populate('round', 'title begTime').sort('-_id').skip(opts.skip).limit(opts.limit).lean();
    if (that = opts.uid) {
      query = query.where('user').equals(that);
    }
    if (that = opts.pid) {
      query = query.where('prob').equals(that);
    }
    solList = yield query.exec();
    user = this$.getCurrentUser();
    log("user", user);
    if (!in$('unpub-rnd-sol', user.priv)) {
      currentTime = moment();
      for (i$ = 0, len$ = solList.length; i$ < len$; ++i$) {
        sol = solList[i$];
        if (sol.round && currentTime.isBefore(sol.round.begTime)) {
          sol.final = {
            status: "hidden"
          };
          sol.prob = {
            _id: 0
          };
        }
      }
    }
    return solList;
  };
  out$.show = show = function*(sid, opts){
    var sol, ref$, ref1$;
    opts == null && (opts = {});
    this$.ensureAccess(model, sid, 'r');
    sol = yield model.findById(sid).populate('prob', 'outlook.title').populate('round', 'published').lean().exec();
    if (((ref$ = sol.round) != null ? ref$.published : void 8) != null && (!((ref1$ = sol.round) != null && ref1$.published) && !in$('unpub-rnd-sol', this$.getCurrentUser().priv))) {
      sol.final = {
        status: "private"
      };
      delete sol.results;
    }
    return sol;
  };
  out$.toggle = toggle = function*(sid){
    var sol;
    this.ensureAccess(model, sid, 'w');
    sol = yield model.findById(sid).exec();
    yield sol.save();
    return {
      open: sol.open
    };
  };
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
