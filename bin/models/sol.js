// Generated by LiveScript 1.4.0
(function(){
  var mongoose, mongooseAutoIncrement, debug, conn, db, core, config, atomResultSchema, schema, model, count, log, out$ = typeof exports != 'undefined' && exports || this, this$ = this;
  mongoose = require('mongoose');
  mongooseAutoIncrement = require('mongoose-auto-increment');
  debug = require('debug');
  conn = require('./conn');
  db = require('../db');
  core = require('../core');
  config = require('../config');
  atomResultSchema = new mongoose.Schema({
    _id: false,
    time: Number,
    space: Number,
    message: String,
    score: Number,
    status: String,
    input: String,
    output: String,
    weight: Number
  });
  schema = new mongoose.Schema({
    open: Boolean,
    code: String,
    lang: String,
    prob: {
      type: Number,
      ref: "problem"
    },
    user: {
      type: String,
      ref: "user"
    },
    round: {
      type: Number,
      ref: "round"
    },
    final: {
      time: Number,
      space: Number,
      message: String,
      score: Number,
      status: String,
      input: String,
      output: String,
      weight: Number
    },
    results: [atomResultSchema]
  });
  schema.plugin(mongooseAutoIncrement.plugin, {
    model: "solution"
  });
  schema.index({
    round: 1,
    prob: 1,
    user: 1,
    _id: -1
  });
  schema.index({
    prob: 1,
    user: 1,
    "final.score": -1
  });
  schema.index({
    user: 1,
    prob: 1,
    round: 1,
    "final.score": -1
  });
  out$.model = model = conn.conn.model('solution', schema);
  count = 0;
  log = debug('dollast:sol');
  import$(out$, {
    submit: function*(req, uid){
      var sol, prob, that, body;
      this.acquirePrivilege('login');
      sol = new model({
        code: req.code,
        lang: req.lang,
        prob: req.pid,
        user: uid,
        final: {
          status: "running"
        }
      });
      prob = (yield db.prob.model.findById(req.pid, 'config').exec());
      if (!prob) {
        throw new Error('no problem found. ');
      }
      if (that = prob.config.round) {
        sol.round = that;
        (yield prob.populate('config.round', 'begTime').execPopulate());
        if (!prob.config.round.isStarted()) {
          this.acquirePrivilege('prob-all');
        }
      }
      (yield sol.save());
      body = {
        status: 'OK'
      };
      return core.judge(req.lang, req.code, prob.config, sol);
    },
    list: function*(opts){
      var newOpts, query, that, solList, user, i$, len$, sol;
      newOpts = {};
      importAll$(newOpts, config.solListOpts);
      importAll$(newOpts, opts);
      opts = newOpts;
      query = model.find({}, '-code -results').populate('prob', 'outlook.title').populate('round', 'published').sort('-_id').skip(opts.skip).limit(opts.limit).lean();
      if (that = opts.uid) {
        query = query.where('user').equals(that);
      }
      if (that = opts.pid) {
        query = query.where('prob').equals(that);
      }
      solList = (yield query.exec());
      user = this$.getCurrentUser();
      log("user", user);
      if (!in$('unpub-rnd-sol', user.priv)) {
        for (i$ = 0, len$ = solList.length; i$ < len$; ++i$) {
          sol = solList[i$];
          if (sol.round && !sol.round.published) {
            sol.final = {
              status: "hidden"
            };
            delete sol.prob;
          }
        }
      }
      return solList;
    },
    show: function*(sid, opts){
      var sol, ref$, ref1$, ref2$;
      opts == null && (opts = {});
      sol = (yield model.findById(sid).populate('prob', 'outlook.title').populate('round', 'published').lean().exec());
      if (!sol.open && sol.user !== ((ref$ = this$.getCurrentUser()) != null ? ref$._id : void 8)) {
        log(sol.user, this$.getCurrentUser());
        this$.acquirePrivilege('sol-all');
      }
      if (((ref1$ = sol.round) != null ? ref1$.published : void 8) != null && (!((ref2$ = sol.round) != null && ref2$.published) && !in$('unpub-rnd-sol', this$.getCurrentUser().priv))) {
        sol.final = {
          status: "private"
        };
        delete sol.results;
      }
      return sol;
    },
    toggle: function*(sid){
      var sol, ref$;
      sol = (yield model.findById(sid).exec());
      if (sol.user !== ((ref$ = this.getCurrentUser()) != null ? ref$._id : void 8)) {
        this.acquirePrivilege('sol-all');
      }
      sol.open = !sol.open;
      (yield sol.save());
      return {
        open: sol.open
      };
    }
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
