// Generated by LiveScript 1.3.1
var mongoose, util, debug, conn, log, schema, model, count, out$ = typeof exports != 'undefined' && exports || this;
mongoose = require('mongoose');
util = require('util');
debug = require('debug');
conn = require('./conn');
log = debug("prob-model");
schema = new mongoose.Schema({
  _id: Number,
  outlook: {
    desc: String,
    title: String,
    inFmt: String,
    outFmt: String,
    sampleIn: String,
    sampleOut: String
  },
  config: {
    round: {
      type: Number,
      ref: "round"
    },
    timeLmt: Number,
    spaceLmt: Number,
    stkLmt: Number,
    outLmt: Number,
    regexp: String,
    judger: String,
    dataset: [{
      input: String,
      output: String,
      weight: Number
    }],
    disabled: Boolean
  },
  stat: {}
});
out$.model = model = conn.conn.model('problem', schema);
count = 0;
import$(out$, {
  show: function*(pid, opts){
    var fields, prob;
    opts == null && (opts = {});
    opts.mode || (opts.mode = "view");
    fields = (function(){
      switch (opts.mode) {
      case "view":
        return "outlook config.timeLmt config.spaceLmt";
      case "total":
        return undefined;
      default:
        throw Error('unimplemented');
      }
    }());
    if (opts.mode === "total") {
      this.acquirePrivilege('prob-all');
    }
    prob = yield model.findById(pid, fields).lean().exec();
    if (prob.disabled) {
      this.acquirePrivilege('prob-all');
    }
    return prob;
  },
  list: function*(){
    return yield model.find({}, 'outlook.title stat').exec();
  },
  modify: function*(pid, prob){
    this.acquirePrivilege('prob-all');
    return yield model.update({
      _id: pid
    }, {
      $set: prob
    }, {
      upsert: true,
      overwrite: true
    }).exec();
  },
  updData: function*(pid){
    var prob, pairs;
    this.acquirePrivilege('prob-all');
    prob = yield model.findById(pid, 'config.dataset').exec();
    log("prob: " + util.inspect(prob));
    pairs = yield core.genDataPairs(pid);
    prob.config.dataset = _.map((function(it){
      return it.weight = 1, it;
    }), pairs);
    yield prob.save();
  },
  listDataset: function*(pid){
    var prob;
    this.acquirePrivilege('prob-all');
    prob = yield model.findById(pid, "config.dataset").lean().exec();
    return prob.config.dataset;
  },
  nextCount: function*(){
    this.acquirePrivilege('prob-all');
    yield conn.nextCount(model, count);
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}