// Generated by LiveScript 1.3.1
(function(){
  var db, crypt, debug, koaJwt, _, config, nodeForge, log, ref$, out$ = typeof exports != 'undefined' && exports || this;
  db = require('../db');
  crypt = require('../crypt');
  debug = require('debug');
  koaJwt = require('koa-jwt');
  _ = require('prelude-ls');
  config = require('../config');
  nodeForge = require('node-forge');
  log = debug('dollast:ctrl:site');
  ref$ = out$;
  ref$.theme = function*(){
    this.state.user.theme = this.params.theme;
    this.body = {
      status: true
    };
  };
  ref$.token = function*(){
    var token;
    token = this.crypt.genSalt();
    log({
      token: token
    });
    this.body = {
      token: token
    };
  };
  ref$.login = function*(){
    var post, pswd, user, groups, i, clientKey, serverKey, serverPayload, clientPayload, payload, token, refresh;
    post = this.request.body;
    pswd = post.pswd;
    if (this.errors) {
      return;
    }
    user = yield db.user.query(post.uid, pswd);
    if (!user) {
      this.body = {
        status: {
          type: "err",
          msg: "bad user/password combination"
        }
      };
    } else {
      groups = user.groups;
      groups.push('login');
      this.state.user.priv = _.listsToObj(groups, (function(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = groups.length; i$ <= to$; ++i$) {
          i = i$;
          results$.push(true);
        }
        return results$;
      }()));
      clientKey = this.request.body.clientKey;
      serverKey = config.serverAESKey;
      serverPayload = JSON.stringify({
        uid: user._id,
        priv: this.state.user.priv,
        clientKey: clientKey
      });
      clientPayload = JSON.stringify({
        uid: user._id
      });
      payload = {
        server: serverPayload,
        client: clientPayload
      };
      token = koaJwt.sign(payload, config.jwtKey, {
        expiresInSeconds: 60 * 60 * 24
      });
      refresh = koaJwt.sign(payload, config.serverAESKey, {
        expiresInSeconds: 60 * 60 * 24 * 30
      });
      this.body = {
        token: token,
        status: {
          type: "ok",
          msg: "login successfully"
        }
      };
    }
  };
  ref$.logout = function*(){
    throw Error('unimplemented');
  };
}).call(this);
