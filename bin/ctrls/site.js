// Generated by LiveScript 1.3.1
var db, debug, log, ref$, out$ = typeof exports != 'undefined' && exports || this;
db = require('../db');
debug = require('debug');
log = debug('dollast:ctrl:site');
ref$ = out$;
ref$.theme = function*(){
  this.session.theme = this.params.theme;
  this.body = {
    status: true
  };
};
ref$.loginToken = function*(){
  throw Error('unimplemented');
  this.body = this.session.loginToken = 1;
};
ref$.session = function*(){
  var that, ref$, ref1$;
  log(this.session);
  this.body = {
    uid: (that = (ref$ = this.session.passport) != null ? (ref1$ = ref$.user) != null ? ref1$._id : void 8 : void 8) != null ? that : void 8
  };
};
ref$.login = function*(){
  var user, privList, i, claims, token;
  user = yield db.user.query(this.request.body);
  if (!user) {
    this.body = {
      status: {
        type: "err",
        msg: "bad user/password combination"
      }
    };
  } else {
    privList = user.privList;
    privList.push('login');
    this.session.priv = _.listsToObj(privList, (function(){
      var i$, to$, results$ = [];
      for (i$ = 1, to$ = privList.length; i$ <= to$; ++i$) {
        i = i$;
        results$.push(true);
      }
      return results$;
    }()));
    claims = {
      _id: user._id
    };
    token = koaJwt.sign(claims, config.secret, {
      expiresInSeconds: 10
    });
    this.body = {
      token: token,
      status: {
        type: "ok",
        msg: "login successfully"
      }
    };
  }
};
ref$.logout = function*(){
  throw Error('unimplemented');
};