// Generated by LiveScript 1.4.0
(function(){
  var db, debug, log, list, nextCount, show, total, brief, save, remove, repair, stat, out$ = typeof exports != 'undefined' && exports || this;
  db = require('../db');
  debug = require('debug');
  log = debug('dollast:ctrls:prob');
  out$.list = list = function*(){
    this.body = (yield db.prob.list(this.query));
    return log("prob-list " + this.body);
  };
  out$.nextCount = nextCount = function*(){
    return this.body = {
      type: 'success',
      payload: {
        _id: (yield db.prob.nextCount())
      }
    };
  };
  out$.show = show = function*(){
    return this.body = (yield db.prob.show(this.params.pid, {
      mode: "view"
    }));
  };
  out$.total = total = function*(){
    return this.body = (yield db.prob.show(this.params.pid, {
      mode: "total"
    }));
  };
  out$.brief = brief = function*(){
    return this.body = (yield db.prob.show(this.params.pid, {
      mode: "brief"
    }));
  };
  out$.save = save = function*(){
    var req, ref$;
    req = this.request.body;
    this.checkBody('outlook').notEmpty('must exists');
    this.checkBody('config').notEmpty('must exists');
    log(req.outlook.title);
    this.check(req.outlook, 'title').len(1, 63);
    this.check(req.config, 'timeLmt').toFloat().gt(0);
    this.check(req.config, 'spaceLmt').toFloat().gt(0);
    this.check(req.config, 'stkLmt').toFloat().gt(0);
    this.check(req.config, 'outLmt').toFloat().gt(0);
    this.check(req.config, 'judger')['in'](['string', 'strict', 'real', 'custom']);
    if (this.errors) {
      return;
    }
    this.body = (yield db.prob.modify(this.params.pid, this.request.body));
    return ref$ = this.body, ref$.status = {
      type: "ok",
      msg: "problem has been saved"
    }, ref$;
  };
  out$.remove = remove = function*(){
    throw Error('unimplemented');
  };
  out$.repair = repair = function*(){
    var newPairs;
    newPairs = (yield db.prob.updData(this.params.pid));
    return this.body = {
      type: 'server/success',
      payload: newPairs
    };
  };
  out$.stat = stat = function*(){
    return this.body = (yield db.prob.stat(this.params.pid));
  };
}).call(this);
