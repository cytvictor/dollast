// Generated by LiveScript 1.3.1
(function(){
  var db, debug, log, ref$, out$ = typeof exports != 'undefined' && exports || this;
  db = require('../db');
  debug = require('debug');
  log = debug('dollast:ctrls:prob');
  ref$ = out$;
  ref$.list = function*(){
    this.body = yield db.prob.list(this.query);
    log("prob-list " + this.body);
  };
  ref$.nextCount = function*(){
    this.acquirePrivilege('login');
    log("next-count");
    this.body = {
      type: 'success',
      payload: {
        _id: yield db.prob.nextCount()
      }
    };
  };
  ref$.show = function*(){
    log('show');
    this.acquirePrivilege('login');
    this.body = yield db.prob.show(this.params.pid, {
      mode: "view"
    });
  };
  ref$.total = function*(){
    this.acquirePrivilege('login');
    this.body = yield db.prob.show(this.params.pid, {
      mode: "total"
    });
  };
  ref$.brief = function*(){
    this.acquirePrivilege('login');
    this.body = yield db.prob.show(this.params.pid, {
      mode: "brief"
    });
  };
  ref$.save = function*(){
    var req;
    this.acquirePrivilege('login');
    req = this.request.body;
    this.checkBody('outlook').notEmpty('must exists');
    this.checkBody('config').notEmpty('must exists');
    log(req.outlook.title);
    this.check(req.outlook, 'title').len(1, 63);
    this.check(req.config, 'timeLmt').toFloat().gt(0);
    this.check(req.config, 'spaceLmt').toFloat().gt(0);
    this.check(req.config, 'stkLmt').toFloat().gt(0);
    this.check(req.config, 'outLmt').toFloat().gt(0);
    this.check(req.config, 'judger')['in'](['string', 'strict', 'real', 'custom']);
    if (this.errors) {
      return;
    }
    this.body = yield db.prob.modify(this.params.pid, this.request.body);
    this.body.status = {
      type: "ok",
      msg: "problem has been saved"
    };
  };
  ref$['delete'] = function*(){
    throw Error('unimplemented');
  };
  ref$.repair = function*(){
    var newPairs;
    this.acquirePrivilege('login');
    newPairs = yield db.prob.updData(this.params.pid);
    this.body = {
      type: 'server/success',
      payload: newPairs
    };
  };
  ref$.stat = function*(){
    this.acquirePrivilege('login');
    this.body = yield db.prob.stat(this.params.pid);
  };
}).call(this);
