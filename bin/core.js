// Generated by LiveScript 1.3.1
(function(){
  var async, util, fs, childProcess, tmp, bluebird, co, debug, path, config, log, compile, flatternDir, upload, getDataList, judgeResult, runAtom, judge, out$ = typeof exports != 'undefined' && exports || this;
  async = require('async');
  util = require('util');
  fs = require('mz/fs');
  childProcess = require('mz/child_process');
  tmp = require('tmp');
  bluebird = require('bluebird');
  co = require('co');
  debug = require('debug');
  path = require('path');
  config = require('./config');
  log = debug('core');
  out$.compile = compile = co.wrap(function*(tmpDir, lang, code){
    var srcPath, exePath, srcFile, compileCmd;
    srcPath = path.join(tmpDir("/main" + config.langSuffix[lang]));
    exePath = path.join(tmpDir("/main"));
    srcFile = fs.createWriteStream(srcPath);
    srcFile.write(code);
    compileCmd = config.compileFmt[lang](srcPath, exePath);
    log("compile-cmd " + compileCmd);
    yield childProcess.exec(compileCmd);
    return exePath;
  });
  flatternDir = function*(baseDir){
    var walk;
    walk = function*(dir){
      var files, i$, len$, file;
      files = fs.readdirSync(dir);
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        file = files[i$];
        if (fs.statSync(file).isDirectory()) {
          walk(path.join(dir, file));
          fs.rmdir(dir);
        } else if (dir !== baseDir) {
          fs.renameSync;
        }
      }
    };
    walk(baseDir);
  };
  out$.upload = upload = co.wrap(function*(pid, part){
    var extName, zipFile, dataDir, ref$, stdout, stderr, err, ret;
    extName = path.extname(part.filename);
    zipFile = tmp.fileSync({
      postfix: extName
    });
    log("upload " + part.filename + " -> " + zipFile.name);
    try {
      part.pipe(fs.createWriteStream(zipFile.name));
      dataDir = path.join(config.dataDir, "/" + pid);
      ref$ = yield childProcess.exec("7z e " + zipFile.name + " -o" + dataDir + " -y"), stdout = ref$[0], stderr = ref$[1];
      log("output: " + stdout + " " + stderr);
      yield flatternDir(dataDir);
    } catch (e$) {
      err = e$;
      ret = {
        status: "decompressing error"
      };
    } finally {
      zipFile.removeCallback();
      ret = {
        status: "OK"
      };
    }
    return ret;
  });
  out$.getDataList = getDataList = co.wrap(function(pid){
    var dataDir, files;
    dataDir = path.join(config.dataDir("/" + pid + "/"));
    files = fs.readdirSync(dataDir);
    return files;
  });
  judgeResult = co.wrap(function*(pid, inFile, outFile, ansFile, config){
    var judger, result;
    judger = (function(){
      switch (config.judger) {
      case 'string':
        return path.join(config.judgerDir, "/string");
      case 'real':
        return path.join(config.judgerDir, "/real");
      case 'strict':
        return path.join(config.judgerDir, "/strict");
      case 'custom':
        return path.join(config.dataDir, "/" + pid + "/", "/judge");
      default:
        throw Error('unimplemented');
      }
    }());
    result = yield childProcess.exec(judger + " " + inFile + " " + outFile + " " + ansFile);
    return JSON.parse(result);
  });
  out$.runAtom = runAtom = co.wrap(function*(pid, lang, exePath, config, callback){
    var ref$, outFile, proc, exeRes, judgeRes;
    ref$ = yield tmp.file, outFile = ref$[0], callback = ref$[1];
    proc = yield childProcess.exec(config.sandboxer + " " + exePath + "" + config.timeLmt + " " + config.spaceLmt + " " + config.stkLmt + " " + config.outLmt + " " + config.input + " " + outFile);
    exeRes = JSON.parse(proc);
    if (exeRes.status !== 'OK') {
      return exeRes;
    }
    judgeRes = yield judgeResult(pid, config.input, outFile, config.output);
    return import$(exeRes, judgeRes);
  });
  out$.judge = judge = co.wrap(function*(lang, code, probConfig, doc){
    var ref$, tmpDir, cleanUp, exePath, dataset, tasks, results, err;
    ref$ = yield tmp.dir, tmpDir = ref$[0], cleanUp = ref$[1];
    try {
      exePath = yield compile(tmpDir, lang, code);
      dataset = (ref$ = probConfig.dataset, delete probConfig.dataset, ref$);
      tasks = map(function(){
        return function(callback){
          return runAtom(pid, lang, exePath, import$(clone$(it), probConfig), callback);
        };
      })(
      dataset);
      results = yield async.parallelLimit(tasks, config.concurrency);
      console.log("judge results " + results);
      throw Error('unimplemented');
    } catch (e$) {
      err = e$;
      throw err;
    } finally {
      cleanUp();
    }
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);
