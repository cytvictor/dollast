// Generated by LiveScript 1.4.0
(function(){
  var ref$, createStore, applyMiddleware, compose, promiseMiddleware, reduxThunk, createLogger, rootReducer, devTools, persistState, I, log, errorMiddleware, configureStore, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('redux'), createStore = ref$.createStore, applyMiddleware = ref$.applyMiddleware, compose = ref$.compose;
  promiseMiddleware = require('redux-promise');
  reduxThunk = require('redux-thunk');
  createLogger = require('redux-logger');
  rootReducer = require('../reducers').rootReducer;
  ref$ = require('redux-devtools'), devTools = ref$.devTools, persistState = ref$.persistState;
  I = require('immutable');
  log = debug('dollast:store');
  errorMiddleware = function(store){
    var dispatch, getState;
    dispatch = store.dispatch;
    getState = store.getState;
    return function(next){
      return function(action){
        var addJwt, payload, ref$, e;
        if (action instanceof Function) {
          addJwt = function(request){
            var token;
            token = getState().getIn(['session', 'token'], null);
            if (token) {
              return request = request.set('Authorization', "Bearer " + token);
            }
          };
          action(addJwt, dispatch, getState);
          return;
        }
        payload = action.payload;
        if (payload instanceof Error) {
          action.error = true;
        }
        if ((payload != null ? (ref$ = payload.constructor) != null ? ref$.name : void 8 : void 8) === 'Response') {
          action.payload = action.payload.body;
        }
        try {
          return next(action);
        } catch (e$) {
          e = e$;
          return log(e);
        }
      };
    };
  };
  out$.configureStore = configureStore = function(initState){
    var logger, finalCreateStore, store;
    logger = createLogger({
      transformer: function(state){
        return I.fromJS(state).toJS();
      }
    });
    finalCreateStore = compose(applyMiddleware(errorMiddleware, promiseMiddleware, logger), devTools(), persistState(window.location.href.match(/[?&]debug_session=([^&]+)\b/)));
    return store = finalCreateStore(createStore)(rootReducer, initState);
  };
}).call(this);
