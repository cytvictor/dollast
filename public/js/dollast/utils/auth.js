// Generated by LiveScript 1.4.0
(function(){
  var pubKey, RSAEntity, log, ref$, out$ = typeof exports != 'undefined' && exports || this;
  pubKey = '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCV8qwyGUz1mKUNyMUXIb5THUYJ\n9Xf9WgL/GC5UeVon7JKtzeWXRSCmzxlO5XD4GD8zcJ728kNfABdizPQ1HG4MFfRc\ns5vPQDiIR23dafkGODmE039aKRiTc+xxrLgx3huasFan+2yG/tiFQbXEFfAmLaal\n6FuOukBTwitq0XBdiQIDAQAB\n-----END PUBLIC KEY-----';
  RSAEntity = forge.pki.publicKeyFromPem(pubKey);
  log = debug('dollast:auth');
  ref$ = out$;
  ref$.RSA = {
    enc: function(txt){
      return txt;
    },
    dec: function(cipher, key){
      return cipher;
    }
  };
  ref$.jwt = {
    enc: function(header, payload, key){
      var header64, payload64, unsignedToken, h, signature64, ret;
      if ('string' !== typeof header) {
        header = JSON.stringify(header);
      }
      if ('string' !== typeof payload) {
        payload = JSON.stringify(payload);
      }
      header64 = forge.util.encode64(header);
      payload64 = forge.util.encode64(payload);
      unsignedToken = header64 + "." + payload64;
      h = forge.hmac.create();
      h.start('sha256', key);
      h.update(unsignedToken);
      signature64 = forge.util.encode64(forge.util.hexToBytes(h.digest().toHex()));
      ret = (unsignedToken + "." + signature64).replace(/\//g, '_').replace(/\+/g, '-').replace(/\=/g, '');
      return ret;
    },
    dec: function(token){
      var jwtStruct, payload;
      jwtStruct = token.split('.');
      while (jwtStruct[1].length % 4 !== 0) {
        jwtStruct[1] += "=";
      }
      return payload = JSON.parse(forge.util.decode64(jwtStruct[1]));
    }
  };
}).call(this);
