// Generated by LiveScript 1.4.0
(function(){
  var co, createAction, auth, request, toServerFmt, log, setJwt, onLoadFromToken, onLogin, onRegister, onLogout, onUpdateProblem, onRefreshProblemList, onGetProblem, onSubmitSolution, onGetSolutionsList, onGetSolution, onGetRound, onUploadFiles, onAddProbToRound, out$ = typeof exports != 'undefined' && exports || this;
  co = require('co');
  createAction = require('redux-actions').createAction;
  auth = require('../utils/auth');
  request = require('../utils/request');
  toServerFmt = require('../components/utils').toServerFmt;
  log = debug('dollast:action');
  setJwt = function(token){};
  out$.onLoadFromToken = onLoadFromToken = createAction('load-from-token', function(token){
    var payload, clientInfo, e;
    if (token) {
      try {
        payload = auth.jwt.dec(token);
        clientInfo = JSON.parse(payload.client);
        setJwt(token);
        return token;
      } catch (e$) {
        e = e$;
        return new Error("invalid token: " + token + ". error message: " + e.message);
      }
    } else {
      return new Error("no given token");
    }
  });
  out$.onLogin = onLogin = function(info){
    return co.wrap(function*(addJwt, dispatch){
      var ret;
      log("store received", info);
      ret = (yield request.post('/site/login').send(info).use(addJwt).end());
      return dispatch(onLoadFromToken(ret.body.token));
    });
  };
  out$.onRegister = onRegister = function(info){
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.post('/user/register').send(info).use(addJwt).end());
      return dispatch({
        type: 'register',
        payload: data.body
      });
    });
  };
  out$.onLogout = onLogout = createAction('logout', function(){
    delete localStorage.token;
    return null;
  });
  out$.onUpdateProblem = onUpdateProblem = function(pid, info){
    return co.wrap(function*(addJwt, dispatch){
      log('update problem', toServerFmt(info));
      (yield request.post("/problem/" + pid).send(toServerFmt(info)).use(addJwt).end());
      return dispatch({
        type: 'problem/update',
        payload: info
      });
    });
  };
  out$.onRefreshProblemList = onRefreshProblemList = function(){
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get('/problem').end());
      return dispatch({
        type: 'problem/refresh-list',
        payload: data.body
      });
    });
  };
  out$.onGetProblem = onGetProblem = function(pid, load, mode){
    mode == null && (mode = "");
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get("/problem/" + pid + "/" + mode).use(addJwt).end());
      data.body.load = load;
      return dispatch({
        type: 'problem/get',
        payload: data.body
      });
    });
  };
  out$.onSubmitSolution = onSubmitSolution = function(data){
    return co.wrap(function*(addJwt, dispatch){
      var res;
      res = (yield request.post('/solution/submit').send(data).use(addJwt).end());
      return dispatch({
        type: 'solution/submit',
        payload: res.body
      });
    });
  };
  out$.onGetSolutionsList = onGetSolutionsList = function(){
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get('/solution').use(addJwt).end());
      return dispatch({
        type: 'solution/list',
        payload: data.body
      });
    });
  };
  out$.onGetSolution = onGetSolution = function(sid){
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get("/solution/" + sid).use(addJwt).end());
      return dispatch({
        type: 'solution/get',
        payload: data.body
      });
    });
  };
  out$.onGetRound = onGetRound = function(rid, load, mode){
    mode == null && (mode = "");
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get("/round/" + rid + "/" + mode).use(addJwt).end());
      data.body.load = load;
      return dispatch({
        type: 'round/get',
        payload: data.body
      });
    });
  };
  out$.onUploadFiles = onUploadFiles = function(pid, files){
    return co.wrap(function*(addJwt, dispatch){
      var req, i$, ref$, len$, f, data;
      log({
        files: files
      });
      req = request.post("/data/" + pid + "/upload");
      for (i$ = 0, len$ = (ref$ = files).length; i$ < len$; ++i$) {
        f = ref$[i$];
        req.attach(f.name, f);
      }
      data = (yield req.use(addJwt).end());
      return dispatch({
        type: 'problem/upload',
        payload: (yield* (function*(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = files).length; i$ < len$; ++i$) {
            f = ref$[i$];
            results$.push(f.name);
          }
          return results$;
        }()))
      });
    });
  };
  out$.onAddProbToRound = onAddProbToRound = function(pid){
    return co.wrap(function*(addJwt, dispatch){
      var probInfo;
      probInfo = (yield request.get("/problem/" + pid + "/brief").use(addJwt).end());
      return dispatch({
        type: 'round/add-prob',
        payload: probInfo.body
      });
    });
  };
}).call(this);
