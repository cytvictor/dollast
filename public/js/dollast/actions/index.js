// Generated by LiveScript 1.3.1
(function(){
  var co, createAction, auth, request, toServerFmt, log, setJwt, onLoadFromToken, onLogin, onRegister, onLogout, onUpdateProblem, onRefreshProblemList, onGetProblem, onSubmitSolution, onGetSolutionsList, onGetSolution, onGetRound, onUploadFiles, onAddProbToRound, out$ = typeof exports != 'undefined' && exports || this;
  co = require('co');
  createAction = require('redux-actions').createAction;
  auth = require('../utils/auth');
  request = require('../utils/request');
  toServerFmt = require('../components/utils').toServerFmt;
  log = debug('dollast:action');
  setJwt = function(token){
    return request.setHeaders({
      Authorization: "Bearer " + token
    });
  };
  out$.onLoadFromToken = onLoadFromToken = createAction('load-from-token', function(token){
    var payload, clientInfo, e;
    if (token) {
      try {
        payload = auth.jwt.dec(token);
        clientInfo = JSON.parse(payload.client);
        setJwt(token);
        return token;
      } catch (e$) {
        e = e$;
        return new Error("invalid token: " + token + ". error message: " + e.message);
      }
    } else {
      return new Error("no given token");
    }
  });
  out$.onLogin = onLogin = co.wrap(function*(info){
    var ret;
    log("store received", info);
    ret = yield request('post', '/site/login').send(info).end();
    onLoadFromToken(ret.body.token);
  });
  out$.onRegister = onRegister = co.wrap(function*(info){
    var data;
    data = yield request('post', '/user/register').send(info).end();
    return {
      type: 'register',
      payload: data.body
    };
  });
  out$.onLogout = onLogout = createAction('logout', function(){
    delete localStorage.token;
    setJwt("");
    return null;
  });
  out$.onUpdateProblem = onUpdateProblem = co.wrap(function*(pid, info){
    log('update problem', toServerFmt(info));
    yield request('post', "/problem/" + pid).send(toServerFmt(info)).end();
    return {
      type: 'problem/update',
      payload: info
    };
  });
  out$.onRefreshProblemList = onRefreshProblemList = co.wrap(function*(){
    var data;
    data = yield request('get', '/problem').end();
    return {
      type: 'problem/refresh-list',
      payload: data.body
    };
  });
  out$.onGetProblem = onGetProblem = co.wrap(function*(pid, load, mode){
    var data;
    mode == null && (mode = "");
    data = yield request('get', "/problem/" + pid + "/" + mode).end();
    data.body.load = load;
    return {
      type: 'problem/get',
      payload: data.body
    };
  });
  out$.onSubmitSolution = onSubmitSolution = co.wrap(function*(data){
    var res;
    res = yield request('post', '/solution/submit').send(data).end();
    return {
      type: 'solution/submit',
      payload: res.body
    };
  });
  out$.onGetSolutionsList = onGetSolutionsList = co.wrap(function*(){
    var data;
    data = yield request('get', '/solution').end();
    return {
      type: 'solution/list',
      payload: data.body
    };
  });
  out$.onGetSolution = onGetSolution = co.wrap(function*(sid){
    var data;
    data = yield request('get', "/solution/" + sid).end();
    return {
      type: 'solution/get',
      payload: data.body
    };
  });
  out$.onGetRound = onGetRound = co.wrap(function*(rid, load, mode){
    var data;
    mode == null && (mode = "");
    data = yield request('get', "/round/" + rid + "/" + mode).end();
    data.body.load = load;
    return {
      type: 'round/get',
      payload: data.body
    };
  });
  out$.onUploadFiles = onUploadFiles = co.wrap(function*(pid, files){
    var req, i$, len$, f, data;
    log({
      files: files
    });
    req = request('post', "/data/" + pid + "/upload");
    for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
      f = files[i$];
      req.attach(f.name, f);
    }
    data = yield req.end();
    return {
      type: 'problem/upload',
      payload: (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = files).length; i$ < len$; ++i$) {
          f = ref$[i$];
          results$.push(f.name);
        }
        return results$;
      }())
    };
  });
  out$.onAddProbToRound = onAddProbToRound = co.wrap(function*(pid){
    var probInfo;
    probInfo = yield request('get', "/problem/" + pid + "/brief").end();
    return {
      type: 'round/add-prob',
      payload: probInfo.body
    };
  });
}).call(this);
