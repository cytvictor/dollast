// Generated by LiveScript 1.3.1
(function(){
  var doffirst;
  doffirst = angular.module('doffirst', []);
  doffirst.service('doffirst', [
    '$http', (function(){
      var prototype = constructor.prototype;
      function constructor($http){
        this.$http = $http;
        this.caller = function(obj, opts, cb, http){
          var sucCb;
          sucCb = curry$(function(obj, opts, cb, data, status, headers, config){
            if ('undefined' === typeof opts) {
              opts = {};
            } else if ('function' === typeof opts) {
              cb = opts;
              opts = {};
            }
            if (opts.debug) {
              console.log("doffirst: " + JSON.stringify(data));
            }
            if (obj) {
              import$(obj, data);
              if (cb) {
                return cb(obj);
              }
            }
          });
          return http.success(sucCb(obj, opts, cb));
        };
      }
      prototype.get = function(url, obj, opts, cb){
        return this.caller(obj, opts, cb, this.$http.get(url));
      };
      prototype.put = function(url, data, obj, opts, cb){
        console.log("to put " + JSON.stringify(data));
        return this.caller(obj, opts, cb, this.$http.put(url, data));
      };
      prototype.post = function(url, data, obj, opts, cb){
        return this.caller(obj, opts, cb, this.$http.post(url, data));
      };
      prototype['delete'] = function(url, obj, opts, cb){
        return this.caller(obj, opts, cb, this.$http['delete'](url));
      };
      return constructor;
    }())
  ]);
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
