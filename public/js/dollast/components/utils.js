// Generated by LiveScript 1.4.0
(function(){
  var mergeProp, getAttr, addAttr, addClassName, toServerFmt, toClientFmt, flattenObject, out$ = typeof exports != 'undefined' && exports || this;
  out$.mergeProp = mergeProp = function(x, y){
    var key, val;
    x = import$(clone$({}), x);
    for (key in y) {
      val = y[key];
      if (x[key]) {
        x[key] = x[key] + " " + val;
      } else {
        x[key] = val;
      }
    }
    return x;
  };
  out$.getAttr = getAttr = function(x, attrs){
    var z, i$, len$, attr;
    z = {};
    for (i$ = 0, len$ = attrs.length; i$ < len$; ++i$) {
      attr = attrs[i$];
      if (x[attr]) {
        z[attr] = x[attr];
      }
    }
    return z;
  };
  out$.addAttr = addAttr = function(x, y, attrs){
    return mergeProp(x, getAttr(y, attrs));
  };
  out$.addClassName = addClassName = function(obj, className){
    return mergeProp(obj, {
      className: className
    });
  };
  out$.toServerFmt = toServerFmt = function(obj){
    var outlook, config, permit;
    outlook = {
      title: obj.title,
      desc: obj.desc,
      inFmt: obj.inFmt,
      outFmt: obj.outFmt,
      sampleIn: obj.sampleIn,
      sampleOut: obj.sampleOut
    };
    config = {
      rid: obj.rid,
      pid: obj.pid,
      judger: obj.judger,
      timeLmt: obj.timeLmt,
      spaceLmt: obj.spaceLmt,
      outLmt: obj.outLmt,
      stkLmt: obj.stkLmt
    };
    permit = {
      owner: obj.owner,
      group: obj.group,
      access: obj.access
    };
    if (config.rid === "") {
      delete config.rid;
    } else {
      config.rid = parseInt(config.rid);
    }
    config.timeLmt = parseFloat(config.timeLmt);
    config.spaceLmt = parseFloat(config.spaceLmt);
    config.outLmt = parseFloat(config.outLmt);
    config.stkLmt = parseFloat(config.stkLmt);
    permit.access = parseInt(permit.access, 8);
    return {
      outlook: outlook,
      config: config,
      permit: permit
    };
  };
  out$.toClientFmt = toClientFmt = function(obj){
    return flattenObject(obj);
  };
  out$.flattenObject = flattenObject = function(obj){
    var ret, key, val;
    ret = {};
    for (key in obj) {
      val = obj[key];
      if ('object' === typeof val) {
        import$(ret, flattenObject(val));
      } else {
        ret[key] = val;
      }
    }
    return ret;
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);
