// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, iconText, onGetSolution, U, I, highlight, log, selector;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  iconText = require('../elements').iconText;
  onGetSolution = require('../../actions').onGetSolution;
  U = require('../utils');
  I = require('immutable');
  highlight = require('react-highlight');
  log = debug('dollast:component:solution:show');
  selector = function(state){
    return {
      sol: state.getIn(['solution', 'show'], I.fromJS({
        final: {},
        results: []
      }))
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'sol-show',
    componentWillMount: function(){
      return this.props.dispatch(onGetSolution(this.props.params.sid));
    },
    render: function(){
      var sol, result;
      sol = this.props.sol.toJS();
      return _div(null, _h3({
        className: "ui header"
      }, "author: " + sol.user), _h3({
        className: "ui header"
      }, "lang: " + sol.lang), _h3({
        className: "ui header"
      }, "problem:", _span(null, sol.prob)), (function(){
        switch (sol.final.status) {
        case 'private':
          return _p(null, "this code is private");
        case 'CE':
          return _div(null, _p(null, "compile message:"), _pre(null, sol.final.message));
        case 'running':
          return _div({
            className: 'ui'
          }, 'running');
        default:
          return _div(null, _div({
            className: "ui toggle checkbox"
          }, _input({
            type: 'checkbox'
          }, _label("Current state: " + (open ? 'public' : 'private')))), _div({
            className: 'ui'
          }, _h1({
            className: "ui header dividing"
          }, 'details'), _table({
            className: "ui table segment"
          }, _thead(null, _tr(null, _th(null, 'input'), _th(null, 'status'), _th(null, 'time'), _th(null, 'space'), _th(null, 'score'), _th(null, 'message'))), _tbody(null, (function(){
            var i$, ref$, len$, results$ = [];
            for (i$ = 0, len$ = (ref$ = sol.results).length; i$ < len$; ++i$) {
              result = ref$[i$];
              results$.push(_tr({
                className: 'positive',
                key: result.input
              }, _td(null, result.input), _td(null, result.status), _td(null, result.time), _td(null, result.space), _td(null, result.score), _td(null, result.message)));
            }
            return results$;
          }())), _tfoot(null, _tr(null, _th(null, 'final result'), _th(null, sol.final.status), _th(null, sol.final.time), _th(null, sol.final.space), _th(null, sol.final.score), _th(null, sol.final.message))))));
        }
      }()), _h1({
        className: "ui header dividing"
      }, 'code'), _pre(null, _(highlight, {
        className: sol.lang
      }, sol.code)));
    }
  }));
}).call(this);
