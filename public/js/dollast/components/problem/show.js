// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, iconText, onGetProblem, U, I, log, selector, segmentBox;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  iconText = require('../elements').iconText;
  onGetProblem = require('../../actions').onGetProblem;
  U = require('../utils');
  I = require('immutable');
  log = debug('dollast:component:problem:show');
  selector = function(state){
    return {
      problem: state.getIn(['problem', 'show'], I.fromJS({
        outlook: {},
        config: {}
      }))
    };
  };
  segmentBox = createClass({
    displayName: 'segment-box',
    render: function(){
      return _div({
        className: "ui segment"
      }, _div({
        className: "ui top left attached label teal"
      }, this.props.desc), this.props.children);
    }
  });
  module.exports = connect(selector)(createClass({
    displayName: 'prob-show',
    refreshMathjax: function(root){
      return MathJax.Hub.Queue(['Typeset', MathJax.Hub]);
    },
    componentWillMount: function(root){
      this.props.dispatch(onGetProblem(this.props.params.pid, 'show'));
      return this.refreshMathjax(root);
    },
    componentDidUpdate: function(props, states, root){
      return this.refreshMathjax(root);
    },
    render: function(){
      var pid, problem, ref$, ref1$, ref2$, ref3$, ref4$;
      pid = this.props.params.pid;
      problem = this.props.problem.toJS();
      return _div({
        className: "ui"
      }, _h1({
        className: "ui centered"
      }, "Problem " + pid + ". " + problem.outlook.title), _p(null, "time limit: " + ((problem.config || (problem.config = {})).timeLmt || '') + " space limit: " + ((problem.config || (problem.config = {})).spaceLmt || '')), _(segmentBox, {
        desc: 'description'
      }, _p({
        mathjax: true
      }, (ref$ = problem.outlook) != null ? ref$.desc : void 8)), _div({
        className: "ui two column grid"
      }, _div({
        className: 'row'
      }, _div({
        className: 'column'
      }, _(segmentBox, {
        desc: "input format"
      }, _p(null, (ref1$ = problem.outlook) != null ? ref1$.inFmt : void 8))), _div({
        className: 'column'
      }, _(segmentBox, {
        desc: "output format"
      }, _p(null, (ref2$ = problem.outlook) != null ? ref2$.outFmt : void 8)))), _div({
        className: 'row'
      }, _div({
        className: 'column'
      }, _(segmentBox, {
        desc: "sample input"
      }, _pre(null, (ref3$ = problem.outlook) != null ? ref3$.sampleIn : void 8))), _div({
        className: 'column'
      }, _(segmentBox, {
        desc: "sample output"
      }, _pre(null, (ref4$ = problem.outlook) != null ? ref4$.sampleOut : void 8))))), _div({
        className: "ui divider"
      }), _(iconText, {
        className: 'primary',
        href: "#/solution/submit/" + pid,
        text: 'submit',
        icon: 'rocket'
      }), _(iconText, {
        className: 'orange',
        href: "#/problem/" + pid + "/modify",
        text: 'modify',
        icon: 'edit'
      }), _(iconText, {
        className: 'purple',
        href: "#/problem/" + pid + "/stat",
        text: 'statistics',
        icon: "bar chart"
      }));
    }
  }));
}).call(this);
