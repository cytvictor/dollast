// Generated by LiveScript 1.4.0
(function(){
  var co, R, U, E, problem;
  co = require('co');
  R = require('react/addons');
  U = require('../utils');
  E = require('../elements');
  problem = require('../../stores/problem');
  module.exports = R.createClass({
    displayName: 'prob-modify',
    componentDidMount: function(){
      var $form;
      $form = $('#problem-modify');
      $form.form({
        on: 'blur',
        fields: {
          title: {
            identifier: 'title',
            rules: [
              {
                type: 'minLength[2]',
                prompt: 'minimum length is 2'
              }, {
                type: 'maxLength[63]',
                prompt: 'length cannot exceed 63'
              }
            ]
          },
          rid: {
            identifier: 'rid',
            optional: true,
            rules: [{
              type: 'integer[1..]',
              prompt: '#rid must be a positive integer'
            }]
          },
          judger: {
            identifier: 'judger',
            rules: [{
              type: 'empty',
              prompt: 'please choose your judger'
            }]
          },
          timeLmt: {
            identifier: 'timeLmt',
            rules: [{
              type: 'positive',
              prompt: 'time limit must be positive'
            }]
          },
          spaceLmt: {
            identifier: 'spaceLmt',
            rules: [{
              type: 'positive',
              prompt: 'space limit must be positive'
            }]
          },
          stkLmt: {
            identifier: 'stkLmt',
            rules: [{
              type: 'positive',
              prompt: "stack limit must be positive"
            }]
          },
          outLmt: {
            identifier: 'outLmt',
            rules: [{
              type: 'positive',
              prompt: "output limit must be positive"
            }]
          },
          desc: {
            identifier: 'desc',
            rules: [{
              type: "maxLength[65535]",
              prompt: "description cannot be longer than 65535"
            }]
          },
          inFmt: {
            identifier: 'inFmt',
            rules: [{
              type: "maxLength[65535]",
              prompt: "input format cannot be longer than 65535"
            }]
          },
          outFmt: {
            identifier: 'outFmt',
            rules: [{
              type: "maxLength[65535]",
              prmopt: "output format cannot be longer than 65535"
            }]
          },
          sampleIn: {
            identifier: 'sampleIn',
            rules: [{
              type: "maxLength[65535]",
              prompt: "sample input cannot be longer than 65535"
            }]
          },
          sampleOut: {
            identifier: 'sampleOut',
            rules: [{
              type: "maxLength[65535]",
              prompt: "sample output cannot be longer than 65535"
            }]
          }
        },
        onSuccess: this.submit
      });
      if (this.pid === 'create') {
        return co(function*(){
          this.pid = (yield problem.actions.nextCount());
          return console.log(this.pid);
        });
      }
    },
    submit: function(e){
      var $form, allValues;
      e.preventDefault();
      $form = $('#problem-modify');
      allValues = $form.form('get values');
      return problem.actions.update(importAll$(allValues, {
        pid: this.pid
      }));
    },
    render: function(){
      this.pid = this.props.params.pid;
      if (!this.pid) {
        this.pid = "create";
      }
      return _div({
        className: "ui form segment",
        id: 'problem-modify'
      }, _h1({
        className: "ui centered"
      }, "problem: " + this.pid), _div({
        className: "ui three fields"
      }, _(E.labelField, {
        className: "eight wide",
        text: 'title'
      }, _div({
        className: "ui input"
      }, _input({
        name: 'title'
      }))), _(E.labelField, {
        className: "four wide",
        text: "round"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'rid',
        type: 'number',
        placeholder: "optional"
      }))), _(E.labelField, {
        className: "four wide",
        text: 'judger'
      }, _(E.dropdown, {
        name: 'judger',
        'default': "Please choose a judger",
        options: {
          string: 'string',
          real: 'real',
          strict: 'strict',
          custom: 'custom'
        }
      }))), _div({
        className: "ui four fields"
      }, _(E.labelField, {
        text: "time limit (s)"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'timeLmt',
        type: 'number',
        defaultValue: 1
      }))), _(E.labelField, {
        text: "space limit (MB)"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'spaceLmt',
        type: 'number',
        defaultValue: 512
      }))), _(E.labelField, {
        text: "stack limit (MB)"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'stkLmt',
        type: 'number',
        defaultValue: 4
      }))), _(E.labelField, {
        text: "output limit (MB)"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'outLmt',
        type: 'number',
        defaultValue: 10
      })))), _(E.field, null, _(E.labelField, {
        text: 'description'
      }), _textarea({
        name: 'desc'
      })), _div({
        className: "ui two fields"
      }, _(E.labelField, {
        text: "input format"
      }, _textarea({
        name: 'inFmt'
      })), _(E.labelField, {
        text: "output format"
      }, _textarea({
        name: 'outFmt'
      }))), _div({
        className: "ui two fields"
      }, _(E.labelField, {
        text: "sample input"
      }, _textarea({
        name: 'sampleIn'
      })), _(E.labelField, {
        text: "sample output"
      }, _textarea({
        name: 'sampleOut'
      }))), _(E.field, null, _(E.iconText, {
        className: "primary floated submit",
        text: 'Submit',
        icon: 'save'
      })), _div({
        className: "ui error message"
      }));
    }
  });
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
