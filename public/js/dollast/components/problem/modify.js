// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, fromJS, ref$, onUpdateProblem, onGetProblem, onUploadFiles, onRepairProblem, toClientFmt, field, iconText, labelField, dropdown, probFmt, dropzone, log, selector;
  createClass = require('react').createClass;
  connect = require('react-redux').connect;
  fromJS = require('immutable').fromJS;
  ref$ = require('../../actions'), onUpdateProblem = ref$.onUpdateProblem, onGetProblem = ref$.onGetProblem, onUploadFiles = ref$.onUploadFiles, onRepairProblem = ref$.onRepairProblem;
  toClientFmt = require('../utils').toClientFmt;
  ref$ = require('../elements'), field = ref$.field, iconText = ref$.iconText, labelField = ref$.labelField, dropdown = ref$.dropdown;
  probFmt = require('../format').probFmt;
  dropzone = require('react-dropzone');
  log = debug('dollast:component:problem:modify');
  selector = function(state, props){
    return {
      problem: state.getIn(['db', 'problem', props.params.pid, 'get'], fromJS({
        loading: true,
        outlook: {},
        config: {
          timeLmt: 1,
          spaceLmt: 512,
          stkLmt: 4,
          outLmt: 10,
          dataset: [],
          judger: 'string'
        },
        permit: {
          owner: state.getIn(['session', 'uid']),
          group: 'problems',
          access: 420
        }
      })),
      status: state.getIn(['status', 'problem', props.params.pid, 'get'], 'init')
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'prob-modify',
    componentDidMount: function(){
      var $form, pid, that;
      $form = $('#problem-modify');
      $form.form({
        on: 'blur',
        inline: true,
        fields: {
          title: {
            identifier: 'title',
            rules: [
              {
                type: 'minLength[2]',
                prompt: 'title minimum length is 2'
              }, {
                type: 'maxLength[63]',
                prompt: 'title length cannot exceed 63'
              }
            ]
          },
          rid: {
            identifier: 'rid',
            optional: true,
            rules: [{
              type: 'integer[1..]',
              prompt: '#rid must be a positive integer'
            }]
          },
          judger: {
            identifier: 'judger',
            rules: [{
              type: 'empty',
              prompt: 'please choose your judger'
            }]
          },
          timeLmt: {
            identifier: 'timeLmt',
            rules: [{
              type: 'positive',
              prompt: 'time limit must be positive'
            }]
          },
          spaceLmt: {
            identifier: 'spaceLmt',
            rules: [{
              type: 'positive',
              prompt: 'space limit must be positive'
            }]
          },
          stkLmt: {
            identifier: 'stkLmt',
            rules: [{
              type: 'positive',
              prompt: "stack limit must be positive"
            }]
          },
          outLmt: {
            identifier: 'outLmt',
            rules: [{
              type: 'positive',
              prompt: "output limit must be positive"
            }]
          },
          desc: {
            identifier: 'desc',
            rules: [{
              type: "maxLength[65535]",
              prompt: "description cannot be longer than 65535"
            }]
          },
          inFmt: {
            identifier: 'inFmt',
            rules: [{
              type: "maxLength[65535]",
              prompt: "input format cannot be longer than 65535"
            }]
          },
          outFmt: {
            identifier: 'outFmt',
            rules: [{
              type: "maxLength[65535]",
              prmopt: "output format cannot be longer than 65535"
            }]
          },
          sampleIn: {
            identifier: 'sampleIn',
            rules: [{
              type: "maxLength[65535]",
              prompt: "sample input cannot be longer than 65535"
            }]
          },
          sampleOut: {
            identifier: 'sampleOut',
            rules: [{
              type: "maxLength[65535]",
              prompt: "sample output cannot be longer than 65535"
            }]
          },
          owner: {
            identifier: 'owner',
            rules: [{
              type: 'isUserId',
              prompt: 'owner should be valid'
            }]
          },
          group: {
            identifier: 'group',
            rules: [{
              type: 'isUserId',
              prompt: 'group should be valid'
            }]
          },
          access: {
            identifier: 'access',
            rules: [{
              type: 'isAccess',
              prompt: 'access code should be /^[0-7]{3}$/'
            }]
          }
        },
        onSuccess: this.submit
      });
      if (this.props.params.pid) {
        this.props.dispatch(onGetProblem(this.props.params.pid, 'update', 'total'));
      }
      pid = (that = this.props.params.pid) ? parseInt(that) : 0;
      return this.setState({
        pid: pid
      });
    },
    submit: function(e){
      var $form, allValues;
      e.preventDefault();
      $form = $('#problem-modify');
      allValues = $form.form('get values');
      return this.props.dispatch(onUpdateProblem(this.state.pid, allValues));
    },
    updateForms: function(problem){
      var $form;
      problem = toClientFmt(problem.toJS());
      $form = $('#problem-modify');
      if (problem.access) {
        problem.access = problem.access.toString(8);
      }
      return $form.form('set values', problem);
    },
    componentWillUpdate: function(nextProps, nextStates){
      return this.updateForms(nextProps.problem);
    },
    onDrop: function(files){},
    repair: function(){
      return this.props.dispatch(onRepairProblem(this.state.pid));
    },
    upload: function(){
      var files;
      files = this.state.files;
      if (files) {
        return this.props.dispatch(onUploadFiles(this.state.pid, files));
      }
    },
    render: function(){
      var problem, problemTitle, title, atom;
      problem = this.props.problem.toJS();
      problemTitle = probFmt(problem);
      title = this.props.params.pid ? "Update Problem " + problemTitle : "Create Problem";
      return _('div', {
        className: "ui form segment",
        id: 'problem-modify'
      }, _('h1', {
        className: "ui centered"
      }, title), _('div', {
        className: "ui error message"
      }), _('h2', {
        className: "ui dividing header"
      }, 'configuration'), _('div', {
        className: "ui three fields"
      }, _(labelField, {
        className: "eight wide",
        text: 'title'
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'title'
      }))), _(labelField, {
        className: "four wide",
        text: "round"
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'rid',
        type: 'number',
        placeholder: "optional"
      }))), _(labelField, {
        className: "four wide",
        text: 'judger'
      }, _(dropdown, {
        className: 'selection',
        name: 'judger',
        'default': "Please choose a judger",
        options: {
          string: 'string',
          real: 'real',
          strict: 'strict',
          custom: 'custom'
        }
      }))), _('div', {
        className: "ui four fields"
      }, _(labelField, {
        text: "time limit (s)"
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'timeLmt',
        type: 'number'
      }))), _(labelField, {
        text: "space limit (MB)"
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'spaceLmt',
        type: 'number'
      }))), _(labelField, {
        text: "stack limit (MB)"
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'stkLmt',
        type: 'number'
      }))), _(labelField, {
        text: "output limit (MB)"
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'outLmt',
        type: 'number'
      })))), _('h2', {
        className: "ui dividing header"
      }, 'description'), _(field, null, _(labelField, {
        text: 'description'
      }), _('textarea', {
        name: 'desc'
      })), _('div', {
        className: "ui two fields"
      }, _(labelField, {
        text: "input format"
      }, _('textarea', {
        name: 'inFmt'
      })), _(labelField, {
        text: "output format"
      }, _('textarea', {
        name: 'outFmt'
      }))), _('div', {
        className: "ui two fields"
      }, _(labelField, {
        text: "sample input"
      }, _('textarea', {
        name: 'sampleIn'
      })), _(labelField, {
        text: "sample output"
      }, _('textarea', {
        name: 'sampleOut'
      }))), _('h2', {
        className: "ui dividing header"
      }, "dataset management"), _(field, null, _(iconText, {
        icon: 'file',
        text: 'select',
        onClick: this.select
      }), _(iconText, {
        className: 'green',
        icon: 'upload',
        text: 'upload',
        onClick: this.upload
      }), _(iconText, {
        className: 'teal',
        icon: 'refresh',
        text: 'refresh',
        onClick: this.refresh
      }), _(iconText, {
        className: 'purple',
        icon: 'retweet',
        text: 'repair',
        onClick: this.repair
      })), _('div', {
        className: "ui two fields"
      }, _(field, {
        className: "four wide"
      }, _(dropzone, {
        onDrop: this.onDrop
      }, _('div', {
        className: "ui segment"
      }, "drop files here for click to select"))), _(field, {
        className: "twelve wide"
      }, _('table', {
        className: "ui table segment"
      }, _('thead', null, _('tr', null, _('th', null, 'input'), _('th', null, 'output'), _('th', null, 'weight'), _('th', null, ""))), _('tbody', null, (function(){
        var i$, ref$, ref1$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = (ref1$ = problem.config || (problem.config = {})).dataset || (ref1$.dataset = [])).length; i$ < len$; ++i$) {
          atom = ref$[i$];
          results$.push(_('tr', {
            key: atom.input
          }, _('td', null, atom.input), _('td', null, atom.output), _('td', null, atom.weight), _('td', null, _(iconText, {
            className: "right floated mini",
            icon: 'remove',
            text: 'remove',
            onClick: this.remove
          }))));
        }
        return results$;
      }.call(this)))))), _('h2', {
        className: "ui dividing header"
      }, 'permission'), _('div', {
        className: "ui four fields"
      }, _(labelField, {
        text: 'owner'
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'owner'
      }))), _(labelField, {
        text: 'group'
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'group'
      }))), _(labelField, {
        text: 'access'
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'access'
      })))), _(field, null, _(iconText, {
        className: "primary floated submit",
        text: 'Save',
        icon: 'save'
      }), _(iconText, {
        className: "secondary floated",
        text: 'Back',
        icon: 'reply',
        href: "#/problem/" + this.props.params.pid
      })));
    }
  }));
}).call(this);
