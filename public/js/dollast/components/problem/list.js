// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, onRefreshProblemList, E, U, I, log, linkList, selector;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  onRefreshProblemList = require('../../actions').onRefreshProblemList;
  E = require('../elements');
  U = require('../utils');
  I = require('immutable');
  log = debug('dollast:component:problem:list');
  linkList = createClass({
    displayName: 'link-list',
    render: function(){
      var elem;
      return _div({
        className: "ui very relaxed divided link list"
      }, (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = this.props.list).length; i$ < len$; ++i$) {
          elem = ref$[i$];
          results$.push(_a({
            className: "item",
            href: elem.href,
            key: elem.href
          }, _div({
            className: "ui left floated icon"
          }, _i({
            className: "icon check"
          }), _i({
            className: "icon remove"
          })), _div({
            className: "ui right floated"
          }, elem.right), _div({
            className: 'description'
          }, elem.desc)));
        }
        return results$;
      }.call(this)));
    }
  });
  selector = function(state){
    return {
      probList: state.getIn(['problem', 'list'], I.fromJS([]))
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'prob-list',
    componentDidMount: function(){
      return this.props.dispatch(onRefreshProblemList());
    },
    render: function(){
      var probList, res$, i$, ref$, len$, prob;
      res$ = [];
      for (i$ = 0, len$ = (ref$ = this.props.probList.toJS()).length; i$ < len$; ++i$) {
        prob = ref$[i$];
        res$.push({
          href: "#/problem/" + prob._id,
          right: '',
          desc: prob.outlook.title
        });
      }
      probList = res$;
      return _div({
        className: "ui"
      }, _h1({
        className: "ui header dividing"
      }, "problem list"), _(E.tabMenu, {
        menuProps: {
          className: "secondary pointing"
        },
        active: 'all',
        tabs: [
          {
            tabName: 'all',
            text: 'All',
            prop: {
              className: 'blue'
            },
            dom: _(linkList, {
              list: probList
            })
          }, {
            tabName: 'solved',
            text: 'Solved',
            prop: {
              className: 'green'
            },
            dom: _(linkList, {
              list: probList
            })
          }, {
            tabName: 'unsolved',
            text: 'Unsolved',
            prop: {
              className: 'red'
            },
            dom: _(linkList, {
              list: probList
            })
          }
        ]
      }), _(E.iconText, {
        className: "right floated launch primary labeled",
        href: '#/problem/create',
        text: 'create',
        icon: 'plus'
      }));
    }
  }));
}).call(this);
