// Generated by LiveScript 1.3.1
(function(){
  var createClass, connect, ref$, onGetRoundBoard, onGetRound, probLink, userLink, codeLink, I, sort, objToPairs, reverse, log, generateBoard, selector;
  createClass = require('react').createClass;
  connect = require('react-redux').connect;
  ref$ = require('../../actions'), onGetRoundBoard = ref$.onGetRoundBoard, onGetRound = ref$.onGetRound;
  ref$ = require('../elements'), probLink = ref$.probLink, userLink = ref$.userLink, codeLink = ref$.codeLink;
  I = require('immutable');
  ref$ = require('prelude-ls'), sort = ref$.sort, objToPairs = ref$.objToPairs, reverse = ref$.reverse;
  log = debug('dollast:component:round:board');
  generateBoard = function(sols){
    var board, i$, len$, sol, ref$, user, prob;
    board = {};
    for (i$ = 0, len$ = sols.length; i$ < len$; ++i$) {
      sol = sols[i$];
      ref$ = sol._id, user = ref$.user, prob = ref$.prob;
      board[user] || (board[user] = {
        total: 0
      });
      board[user][prob] = {
        score: sol.score,
        sid: sol.sid
      };
      board[user].total += sol.score;
    }
    return board;
  };
  selector = function(state, props){
    var rid;
    rid = props.params.rid;
    return {
      sols: state.getIn(['db', 'round', rid, 'board', 'get'], I.fromJS([])),
      probs: state.getIn(['db', 'round', rid, 'get'], I.fromJS([]))
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'rnd-board',
    componentDidMount: function(){
      this.props.dispatch(onGetRoundBoard(this.props.params.rid));
      return this.props.dispatch(onGetRound(this.props.params.rid, 'show'));
    },
    render: function(){
      var sols, probs, board, prob, user, score, pid;
      sols = this.props.sols.toJS();
      probs = this.props.probs.toJS();
      board = reverse(
      sort(
      objToPairs(
      generateBoard(sols))));
      return _('div', null, _('table', {
        className: "ui table segment large green selectable"
      }, _('thead', null, _('tr', null, _('th', null, 'user'), _('th', null, 'total'), (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = probs).length; i$ < len$; ++i$) {
          prob = ref$[i$];
          results$.push(_('th', null, _(probLink, {
            prob: prob
          })));
        }
        return results$;
      }()))), _('tbody', null, (function(){
        var i$, ref$, len$, ref1$, results$ = [];
        for (i$ = 0, len$ = (ref$ = board).length; i$ < len$; ++i$) {
          ref1$ = ref$[i$], user = ref1$[0], score = ref1$[1];
          results$.push(_('tr', null, _('td', null, _(userLink, {
            user: user
          })), _('td', null, score.total), (fn$())));
        }
        return results$;
        function fn$(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = probs).length; i$ < len$; ++i$) {
            prob = ref$[i$];
            pid = prob._id;
            if (score[pid]) {
              results$.push(_('td', null, _(codeLink, {
                sid: score[pid].sid,
                text: score[pid].score
              })));
            } else {
              results$.push(_('td', null));
            }
          }
          return results$;
        }
      }()))));
    }
  }));
}).call(this);
