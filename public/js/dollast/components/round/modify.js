// Generated by LiveScript 1.4.0
(function(){
  var createClass, ref$, labelField, iconText, iconInput, connect, I, onGetRound, onAddProbToRound, log, selector;
  createClass = require('react/addons').createClass;
  ref$ = require('../elements'), labelField = ref$.labelField, iconText = ref$.iconText, iconInput = ref$.iconInput;
  connect = require('react-redux').connect;
  I = require('immutable');
  ref$ = require('../../actions'), onGetRound = ref$.onGetRound, onAddProbToRound = ref$.onAddProbToRound;
  log = debug('dollast:component:round:modify');
  selector = function(state){
    return {
      round: state.getIn(['round', 'update'], I.Map({
        probs: []
      }))
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'rnd-modify',
    componentWillMount: function(){
      if (this.props.params.rid) {
        return this.props.dispatch(onGetRound(this.props.params.rid, 'update', 'total'));
      }
    },
    insertProb: function(pid){
      pid = parseInt(pid);
      if (Number.isInteger(pid)) {
        return this.props.dispatch(onAddProbToRound(pid));
      }
    },
    handleInput: function(evt){
      if (evt.which === 13) {
        this.insertProb(evt.target.value);
        return evt.target.value = '';
      }
    },
    onAddProb: function(){
      var $input;
      $input = $('#pid');
      return this.insertProb($input[0].value);
    },
    render: function(){
      var round, prob;
      round = this.props.round.toJS();
      return _div({
        className: "ui form segment"
      }, _h1({
        className: "ui header dividing"
      }, "Round"), _div({
        className: "ui fields three"
      }, _(labelField, {
        text: 'title'
      }, _div({
        className: "ui input"
      }, _input({
        name: 'title'
      }))), _(labelField, {
        text: "start from"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'begTime'
      }))), _(labelField, {
        text: "end at"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'endTime'
      })))), _h2({
        className: "ui header dividing"
      }, 'problemset'), _div({
        className: "ui two fields"
      }, _div({
        className: "field"
      }, _table({
        className: "ui table segment definition"
      }, _thead(null, _tr(null, _th({
        className: 'collapsing'
      }, ""), _th(null, 'pid'))), _tbody(null, (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = round.probs).length; i$ < len$; ++i$) {
          prob = ref$[i$];
          results$.push(_tr({
            key: prob
          }, _td(null, _div({
            className: "ui icon button"
          }, _i({
            className: "icon mini remove"
          }))), _td(null, prob._id + ". " + prob.outlook.title)));
        }
        return results$;
      }())), _tfoot(null, _tr(null, _th(null, ""), _th(null, _div({
        className: "ui input action"
      }, _input({
        name: 'pid',
        id: 'pid',
        onChange: this.handleInput
      }), _(iconText, {
        className: "floated right",
        icon: "chevron right",
        text: 'add',
        onClick: this.onAddProb
      })))))))), _div({
        className: 'field'
      }, _(iconText, {
        className: "floated right red",
        text: 'delete',
        icon: 'delete',
        onClick: this['delete']
      }), _(iconText, {
        className: "floated right secondary",
        text: 'cancel',
        icon: 'cancel'
      }), _(iconText, {
        className: "floated right primary",
        text: 'save',
        icon: 'save',
        onClick: this.submit
      })));
    }
  }));
}).call(this);
