// Generated by LiveScript 1.4.0
(function(){
  var createClass, I, moment, map, ref$, labelField, iconText, iconInput, dropdown, connect, onGetRound, onAddProbToRound, onRoundModify, probFmt, log, selector, probsSelection;
  createClass = require('react').createClass;
  I = require('immutable');
  moment = require('moment');
  map = require('prelude-ls').map;
  ref$ = require('../elements'), labelField = ref$.labelField, iconText = ref$.iconText, iconInput = ref$.iconInput, dropdown = ref$.dropdown;
  connect = require('react-redux').connect;
  ref$ = require('../../actions'), onGetRound = ref$.onGetRound, onAddProbToRound = ref$.onAddProbToRound, onRoundModify = ref$.onRoundModify;
  probFmt = require('../format').probFmt;
  log = debug('dollast:component:round:modify');
  selector = function(state, props){
    return {
      round: state.getIn(['db', 'round', props.params.rid, 'get'], I.Map({
        probs: [],
        permit: {
          owner: state.getIn(['session', 'uid']),
          group: 'rounds',
          access: 420
        }
      }))
    };
  };
  probsSelection = createClass({
    displayName: 'problem-selection',
    componentDidMount: function(){
      var $dropdown, this$ = this;
      $dropdown = $('.ui.selection.dropdown');
      return $dropdown.dropdown({
        dataType: 'jsonp',
        apiSettings: {
          onResponse: function(response){
            var title, id;
            if (!response.outlook) {
              return {
                results: []
              };
            }
            title = response.outlook.title;
            id = response._id;
            return {
              results: [{
                value: id,
                name: probFmt(response)
              }]
            };
          },
          url: "/problem/{query}",
          onChange: function(value){
            return log({
              value: value
            });
          }
        }
      });
    },
    componentDidUpdate: function(){
      return $('.ui.selection.dropdown').dropdown('refresh');
    },
    render: function(){
      var x;
      return _(dropdown, {
        className: "ui fluid multiple search selection icon",
        name: this.props.name,
        'default': "",
        options: (function(){
          var i$, ref$, len$, resultObj$ = {};
          for (i$ = 0, len$ = (ref$ = this.props.defaults).length; i$ < len$; ++i$) {
            x = ref$[i$];
            resultObj$[x._id] = probFmt(x);
          }
          return resultObj$;
        }.call(this))
      });
    }
  });
  module.exports = connect(selector)(createClass({
    displayName: 'rnd-modify',
    componentDidMount: function(){
      var $form;
      $form = $('#form-round');
      $form.form({
        on: 'blur',
        onSuccess: this.submit,
        fields: {
          title: {
            identifier: 'title',
            rules: [
              {
                type: 'minLength[4]',
                prompt: 'title has minimum length of 4'
              }, {
                type: 'maxLength[63]',
                prompt: 'title has maximum length of 63'
              }
            ]
          },
          begTime: {
            identifier: 'begTime',
            rules: [{
              type: 'isTime',
              prompt: 'start time should be valid'
            }]
          },
          endTime: {
            identifier: 'endTime',
            rules: [{
              type: 'isTime',
              prompt: 'start time should be valid'
            }]
          },
          owner: {
            identifier: 'owner',
            rules: [{
              type: 'isUserId',
              prompt: 'owner should be valid'
            }]
          },
          group: {
            identifier: 'group',
            rules: [{
              type: 'isUserId',
              prompt: 'group should be valid'
            }]
          },
          access: {
            identifier: 'access',
            rules: [{
              type: 'isAccess',
              prompt: 'access code should be /^[0-7]{3}$/'
            }]
          }
        }
      });
      if (this.props.params.rid) {
        return this.props.dispatch(onGetRound(this.props.params.rid));
      } else {
        return this.updateForms(this.props.round);
      }
    },
    updateForms: function(round){
      var $form, ref$, title, begTime, endTime, permit, probs;
      $form = $('#form-round');
      ref$ = round.toJS(), title = ref$.title, begTime = ref$.begTime, endTime = ref$.endTime, permit = ref$.permit, probs = ref$.probs;
      if (permit != null && permit.access) {
        permit.access = permit.access.toString(8);
      }
      probs = map(function(it){
        return it._id + "";
      }, probs);
      $form.form('set values', {
        title: title,
        begTime: moment(begTime).format('YYYY-MM-DD hh:mm:ss'),
        endTime: moment(endTime).format('YYYY-MM-DD hh:mm:ss'),
        probs: probs
      });
      return $form.form('set values', permit);
    },
    componentDidUpdate: function(prevProps, prevStates){
      return this.updateForms(this.props.round);
    },
    submit: function(){
      var $form, values, permit, probs, data;
      $form = $('#form-round');
      values = $form.form('get values');
      permit = {
        owner: values.owner,
        group: values.group,
        access: values.access
      };
      permit.access = parseInt(permit.access, 8);
      probs = map(parseInt, values.probs.split(','));
      data = Object.assign({
        title: values.title,
        begTime: values.begTime,
        endTime: values.endTime
      }, {
        rid: this.rid,
        probs: probs,
        permit: permit
      });
      return this.props.dispatch(onRoundModify(data));
    },
    render: function(){
      var round, title;
      round = this.props.round.toJS();
      this.rid = this.props.params.rid;
      if (this.rid) {
        title = "Round " + this.rid;
      } else {
        title = "Create new round";
        this.rid = 0;
      }
      return _('div', {
        className: "ui form segment",
        id: 'form-round'
      }, _('h1', {
        className: "ui header dividing"
      }, title), _('div', {
        className: "ui error message"
      }), _('h2', {
        className: "ui dividing header"
      }, 'configuration'), _('div', {
        className: "ui fields three"
      }, _(labelField, {
        text: 'title'
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'title'
      }))), _(labelField, {
        text: "start from"
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'begTime',
        placeholder: "YYYY-MM-DD HH:mm:ss"
      }))), _(labelField, {
        text: "end at"
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'endTime',
        placeholder: "YYYY-MM-DD HH:mm:ss"
      })))), _('h2', {
        className: "ui header dividing"
      }, 'permission'), _('div', {
        className: "ui three fields"
      }, _(labelField, {
        text: 'owner'
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'owner'
      }))), _(labelField, {
        text: 'group'
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'group'
      }))), _(labelField, {
        text: 'access'
      }, _('div', {
        className: "ui input"
      }, _('input', {
        name: 'access'
      })))), _('h2', {
        className: "ui header dividing"
      }, 'problemset'), _('div', {
        className: "ui field"
      }, _(probsSelection, {
        defaults: round.probs,
        name: 'probs'
      })), _('br'), _('div', {
        className: "ui field"
      }, _(iconText, {
        className: "floated red",
        text: 'delete',
        icon: 'delete',
        onClick: this['delete']
      }), _(iconText, {
        className: "floated secondary",
        text: 'cancel',
        icon: 'undo'
      }), _(iconText, {
        className: "floated primary submit",
        text: 'save',
        icon: 'save'
      })));
    }
  }));
}).call(this);
