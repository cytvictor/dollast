// Generated by LiveScript 1.3.1
(function(){
  var _, app, mkCb;
  _ = require('prelude-ls');
  app = angular.module('dollast-app', ["ngRoute", "ui.dateTimeInput"]);
  app.config([
    '$routeProvider', function($routeProvider){
      return $routeProvider.when('/', {
        templateUrl: 'partials/index.html',
        controller: 'index-ctrl'
      }).when('/about', {
        templateUrl: 'partials/about.html'
      }).when('/problem', {
        templateUrl: 'partials/problem/list.html',
        controller: 'prob-list-ctrl'
      }).when('/problem/create', {
        templateUrl: 'partials/problem/modify.html',
        controller: 'prob-modify-ctrl'
      }).when('/problem/:pid', {
        templateUrl: 'partials/problem/show.html',
        controller: 'prob-show-ctrl'
      }).when('/problem/:pid/modify', {
        templateUrl: 'partials/problem/modify.html',
        controller: 'prob-modify-ctrl'
      }).when('/submit/:pid', {
        templateUrl: 'partials/solution/submit.html',
        controller: 'sol-submit-ctrl'
      }).when('/login', {
        templateUrl: 'partials/login.html',
        controller: 'login-ctrl'
      }).when('/solution', {
        templateUrl: 'partials/solution/list.html',
        controller: 'sol-list-ctrl'
      }).when('/solution/:sid', {
        templateUrl: 'partials/solution/show.html',
        controller: 'sol-show-ctrl'
      }).when('/round', {
        templateUrl: 'partials/round/list.html',
        controller: 'rnd-list-ctrl'
      }).when('/round/create', {
        templateUrl: 'partials/round/modify.html',
        controller: 'rnd-modify-ctrl'
      }).when('/round/:rid', {
        templateUrl: 'partials/round/show.html',
        controller: 'rnd-show-ctrl'
      }).when('/round/:rid/modify', {
        templateUrl: 'partials/round/modify.html',
        controller: 'rnd-modify-ctrl'
      }).otherwise({
        templateUrl: 'partials/404.html'
      });
    }
  ]);
  mkCb = function(a, b, c){
    var f;
    f = function(a, y){
      return a = y;
    };
    return c.x(f(a));
  };
  app.service('doffirst', [
    '$http', (function(){
      var prototype = constructor.prototype;
      function constructor($http){
        this.$http = $http;
        this.caller = function(obj, opts, cb, http){
          var sucCb;
          sucCb = curry$(function(obj, opts, cb, data, status, headers, config){
            if ('undefined' === typeof opts) {
              opts = {};
            } else if ('function' === typeof opts) {
              cb = opts;
              opts = {};
            }
            if (opts.debug) {
              console.log("data: " + JSON.stringify(data));
            }
            if (obj) {
              import$(obj, data);
              if (cb) {
                return cb(obj);
              }
            }
          });
          return http.success(sucCb(obj, opts, cb));
        };
      }
      prototype.get = function(url, obj, opts, cb){
        return this.caller(obj, opts, cb, this.$http.get(url));
      };
      prototype.put = function(url, data, obj, opts, cb){
        return this.caller(obj, opts, cb, this.$http.put(url, data));
      };
      prototype.post = function(url, data, obj, opts, cb){
        return this.caller(obj, opts, cb, this.$http.post(url, data));
      };
      prototype['delete'] = function(url, obj, opts, cb){
        return this.caller(obj, opts, cb, this.$http['delete'](url));
      };
      return constructor;
    }())
  ]);
  app.controller('navbar-ctrl', [
    "$scope", "doffirst", function($scope, doffirst){
      return doffirst.get('/session', $scope);
    }
  ]);
  app.controller('index-ctrl', [
    "$scope", "doffirst", "$location", function($scope, doffirst, $location){
      return $scope.submit = function(){
        return $location.path("/solution");
      };
    }
  ]);
  app.controller('login-ctrl', [
    "$scope", "doffirst", function($scope, doffirst){
      $scope.user = {
        username: '',
        password: ''
      };
      return $scope.submit = function(user){
        console.log(user);
        return doffirst.post('/login', $scope.user, $scope, function(it){
          return it.msg = it.status === false;
        });
      };
    }
  ]);
  app.controller('prob-show-ctrl', [
    "$scope", "doffirst", "$routeParams", function($scope, doffirst, $routeParams){
      $scope.pid = parseInt($routeParams.pid);
      return doffirst.get("/problem/" + $scope.pid, $scope);
    }
  ]);
  app.controller('prob-list-ctrl', [
    "$scope", "doffirst", "$routeParams", function($scope, doffirst, $routeParams){
      return doffirst.get("/problem", $scope);
    }
  ]);
  app.controller('prob-modify-ctrl', [
    "$scope", "doffirst", "$routeParams", function($scope, doffirst, $routeParams){
      var that, pid;
      if (that = $routeParams.pid) {
        pid = parseInt(that);
        doffirst.get("/problem/" + pid + "/modify", $scope, function(it){
          return it._id = pid, it;
        });
      } else {
        doffirst.get("/problem/create", $scope);
      }
      return $scope.submit = function(){
        console.log($scope.prob);
        return doffirst.put("/problem/" + pid, $scope.prob);
      };
    }
  ]);
  app.controller('sol-submit-ctrl', [
    "$scope", "doffirst", "$routeParams", "$location", function($scope, doffirst, $routeParams, $location){
      $scope.pid = parseInt($routeParams.pid);
      $scope.lang = 'C++';
      return $scope.submit = function(){
        doffirst.post('/submit', {
          code: $scope.code,
          pid: $scope.pid,
          lang: $scope.lang
        }, {});
        return $location.path("/solution");
      };
    }
  ]);
  app.controller('sol-list-ctrl', [
    "$scope", "doffirst", "$routeParams", function($scope, doffirst, $routeParams){
      return doffirst.get("/solution", $scope);
    }
  ]);
  app.controller('sol-show-ctrl', [
    "$scope", "doffirst", "$routeParams", function($scope, doffirst, $routeParams){
      $scope.sid = parseInt($routeParams.sid);
      return doffirst.get("/solution/" + $scope.sid, $scope);
    }
  ]);
  app.controller('rnd-list-ctrl', [
    "$scope", "doffirst", "$routeParams", function($scope, doffirst, $routeParams){
      return doffirst.get("/round", $scope);
    }
  ]);
  app.controller('rnd-show-ctrl', [
    "$scope", "doffirst", "$routeParams", function($scope, doffirst, $routeParams){
      var rid;
      rid = parseInt($routeParams.rid);
      return doffirst.get("/round/" + rid, $scope);
    }
  ]);
  app.controller('rnd-modify-ctrl', [
    "$scope", "doffirst", "$routeParams", function($scope, doffirst, $routeParams){
      var that;
      $scope.pid = 0;
      if (that = $routeParams.rid) {
        doffirst.get("/round/" + that + "/modify", $scope, function(it){
          it.rnd._id = that;
          return it.probs = it.rnd.probs;
        });
      } else {
        doffirst.get("/round/create", $scope, function(it){
          var ref$;
          ref$ = it.rnd;
          ref$.begTime = new Date(Date.now());
          ref$.endTime = new Date(Date.now());
          return it.probs = [];
        });
      }
      $scope.submit = function(){
        console.log($scope.rnd);
        $scope.rnd.probs = _.map(function(it){
          return it._id;
        }, $scope.probs);
        return doffirst.put("/round/" + $scope.rnd._id, $scope.rnd);
      };
      $scope.insert = function(){
        var newProb;
        newProb = {};
        return doffirst.get("/problem/" + $scope.pid, newProb, function(it){
          return $scope.probs.push(it.prob);
        });
      };
      $scope.remove = function(pid){
        return $scope.probs = _.reject(function(it){
          return it._id === pid;
        }, $scope.probs);
      };
      return $scope['delete'] = function(){
        return doffirst['delete']("/round/" + $scope.rnd._id);
      };
    }
  ]);
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
