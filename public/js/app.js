(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var co, createAction, auth, request, toServerFmt, log, setJwt, onLoadFromToken, onLogin, onRegister, onLogout, onUpdateProblem, onRefreshProblemList, onGetProblem, onSubmitSolution, onGetSolutionsList, onGetSolution, onGetRound, onUploadFiles, onAddProbToRound, out$ = typeof exports != 'undefined' && exports || this;
  co = require('co');
  createAction = require('redux-actions').createAction;
  auth = require('../utils/auth');
  request = require('../utils/request');
  toServerFmt = require('../components/utils').toServerFmt;
  log = debug('dollast:action');
  setJwt = function(token){};
  out$.onLoadFromToken = onLoadFromToken = createAction('load-from-token', function(token){
    var payload, clientInfo, e;
    if (token) {
      try {
        payload = auth.jwt.dec(token);
        clientInfo = JSON.parse(payload.client);
        setJwt(token);
        return token;
      } catch (e$) {
        e = e$;
        return new Error("invalid token: " + token + ". error message: " + e.message);
      }
    } else {
      return new Error("no given token");
    }
  });
  out$.onLogin = onLogin = function(info){
    return co.wrap(function*(addJwt, dispatch){
      var ret;
      log("store received", info);
      ret = (yield request.post('/site/login').send(info).use(addJwt).end());
      return dispatch(onLoadFromToken(ret.body.token));
    });
  };
  out$.onRegister = onRegister = function(info){
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.post('/user/register').send(info).use(addJwt).end());
      return dispatch({
        type: 'register',
        payload: data.body
      });
    });
  };
  out$.onLogout = onLogout = createAction('logout', function(){
    delete localStorage.token;
    return null;
  });
  out$.onUpdateProblem = onUpdateProblem = function(pid, info){
    return co.wrap(function*(addJwt, dispatch){
      log('update problem', toServerFmt(info));
      (yield request.post("/problem/" + pid).send(toServerFmt(info)).use(addJwt).end());
      return dispatch({
        type: 'problem/update',
        payload: info
      });
    });
  };
  out$.onRefreshProblemList = onRefreshProblemList = function(){
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get('/problem').end());
      return dispatch({
        type: 'problem/refresh-list',
        payload: data.body
      });
    });
  };
  out$.onGetProblem = onGetProblem = function(pid, load, mode){
    mode == null && (mode = "");
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get("/problem/" + pid + "/" + mode).use(addJwt).end());
      data.body.load = load;
      return dispatch({
        type: 'problem/get',
        payload: data.body
      });
    });
  };
  out$.onSubmitSolution = onSubmitSolution = function(data){
    return co.wrap(function*(addJwt, dispatch){
      var res;
      res = (yield request.post('/solution/submit').send(data).use(addJwt).end());
      return dispatch({
        type: 'solution/submit',
        payload: res.body
      });
    });
  };
  out$.onGetSolutionsList = onGetSolutionsList = function(){
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get('/solution').use(addJwt).end());
      return dispatch({
        type: 'solution/list',
        payload: data.body
      });
    });
  };
  out$.onGetSolution = onGetSolution = function(sid){
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get("/solution/" + sid).use(addJwt).end());
      return dispatch({
        type: 'solution/get',
        payload: data.body
      });
    });
  };
  out$.onGetRound = onGetRound = function(rid, load, mode){
    mode == null && (mode = "");
    return co.wrap(function*(addJwt, dispatch){
      var data;
      data = (yield request.get("/round/" + rid + "/" + mode).use(addJwt).end());
      data.body.load = load;
      return dispatch({
        type: 'round/get',
        payload: data.body
      });
    });
  };
  out$.onUploadFiles = onUploadFiles = function(pid, files){
    return co.wrap(function*(addJwt, dispatch){
      var req, i$, ref$, len$, f, data;
      log({
        files: files
      });
      req = request.post("/data/" + pid + "/upload");
      for (i$ = 0, len$ = (ref$ = files).length; i$ < len$; ++i$) {
        f = ref$[i$];
        req.attach(f.name, f);
      }
      data = (yield req.use(addJwt).end());
      return dispatch({
        type: 'problem/upload',
        payload: (yield* (function*(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = files).length; i$ < len$; ++i$) {
            f = ref$[i$];
            results$.push(f.name);
          }
          return results$;
        }()))
      });
    });
  };
  out$.onAddProbToRound = onAddProbToRound = function(pid){
    return co.wrap(function*(addJwt, dispatch){
      var probInfo;
      probInfo = (yield request.get("/problem/" + pid + "/brief").use(addJwt).end());
      return dispatch({
        type: 'round/add-prob',
        payload: probInfo.body
      });
    });
  };
}).call(this);

},{"../components/utils":25,"../utils/auth":29,"../utils/request":30,"co":"co","redux-actions":"redux-actions"}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var custom, co, redux, render, Router, Provider, ref$, DevTools, DebugPanel, LogMonitor, routes, app, configureStore, actions, log, store;
  custom = require('./custom');
  co = require('co');
  redux = require('redux');
  render = require('react/addons').render;
  Router = require('react-router').Router;
  Provider = require('react-redux').Provider;
  ref$ = require('redux-devtools/lib/react'), DevTools = ref$.DevTools, DebugPanel = ref$.DebugPanel, LogMonitor = ref$.LogMonitor;
  routes = require('./components/routes');
  app = require('./components/app');
  configureStore = require('./store').configureStore;
  actions = require('./actions');
  log = debug('dollast:app');
  store = configureStore();
  render(_div(null, _(Provider, {
    store: store
  }, function(){
    return _(Router, null, routes(app));
  }), _(DebugPanel, {
    top: true,
    right: true,
    bottom: true
  }, _(DevTools, {
    store: store,
    monitor: LogMonitor
  }))), document.getElementById('content'));
}).call(this);

},{"./actions":1,"./components/app":3,"./components/routes":13,"./custom":26,"./store":28,"co":"co","react-redux":"react-redux","react-router":"react-router","react/addons":"react/addons","redux":"redux","redux-devtools/lib/react":"redux-devtools/lib/react"}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, ref$, onLogout, onLoadFromToken, E, navbar, footer, log, mapStateToProps;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  ref$ = require('../actions'), onLogout = ref$.onLogout, onLoadFromToken = ref$.onLoadFromToken;
  E = require('../components/elements');
  navbar = require('../components/site/navbar');
  footer = require('../components/site/footer');
  log = debug('dollast:component:app');
  mapStateToProps = function(state){
    return {
      session: state.get('session')
    };
  };
  module.exports = connect(mapStateToProps)(createClass({
    displayName: 'dollast',
    componentWillMount: function(){
      return this.props.dispatch(onLoadFromToken(localStorage.token));
    },
    render: function(){
      var dispatch;
      dispatch = this.props.dispatch;
      return _div({
        className: "ui grid"
      }, _(navbar, {
        uid: this.props.session.get('uid'),
        onLogout: function(){
          return dispatch(onLogout());
        }
      }), _div({
        className: "row"
      }, _div({
        className: "three wide column"
      }), _div({
        className: "ten wide column"
      }, this.props.children)), _div({
        className: "row"
      }, _(footer)));
    }
  }));
}).call(this);

},{"../actions":1,"../components/elements":4,"../components/site/footer":15,"../components/site/navbar":18,"react-redux":"react-redux","react/addons":"react/addons"}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R, U, labeledIcon, iconText, iconInput, ui, field, tabMenu, labelField, dropdown, out$ = typeof exports != 'undefined' && exports || this;
  R = require('react/addons');
  U = require('./utils');
  out$.labeledIcon = labeledIcon = R.createClass({
    displayName: 'labeled-icon',
    render: function(){
      var aProps;
      aProps = U.getAttr(this.props, ['href', 'onClick', 'className', 'onValueChange']);
      aProps = U.mergeProp(aProps, {
        className: "item labeled"
      });
      return _a(aProps, _i({
        className: "icon " + this.props.icon
      }), this.props.text);
    }
  });
  out$.iconText = iconText = R.createClass({
    displayName: "icon-button",
    render: function(){
      var aProps;
      aProps = U.getAttr(this.props, ['href', 'onClick', 'className', 'onValueChange']);
      aProps = U.mergeProp(aProps, {
        className: "ui icon button labeled"
      });
      return _a(aProps, _i({
        className: "icon " + this.props.icon
      }), this.props.text);
    }
  });
  out$.iconInput = iconInput = R.createClass({
    displayName: 'icon-input',
    render: function(){
      var divProps;
      divProps = U.getAttr(this.props, ['href', 'onClick', 'className']);
      divProps = U.mergeProp(divProps, {
        className: "ui input icon"
      });
      return _div(divProps, _i({
        className: "icon " + this.props.icon
      }), _input(this.props.input));
    }
  });
  out$.ui = ui = R.createClass({
    displayName: 'ui',
    render: function(){
      var props;
      props = U.addClassName(this.props, 'ui');
      return _div(props, this.props.children);
    }
  });
  out$.field = field = R.createClass({
    displayName: 'field',
    render: function(){
      var props;
      props = U.addClassName(this.props, 'field');
      return _div(props, this.props.children);
    }
  });
  out$.tabMenu = tabMenu = R.createClass({
    displayName: 'tab-menu',
    componentDidMount: function(){
      return $('.filter.menu .item').tab();
    },
    render: function(){
      var menuProps, menu, tab, tabProp, tabs, res$, i$, ref$, len$, prop;
      menuProps = U.addClassName(this.props.menuProps, "filter menu");
      menu = _div({
        className: "tab",
        key: 'menu'
      }, _(ui, menuProps, (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = this.props.tabs).length; i$ < len$; ++i$) {
          tab = ref$[i$];
          tabProp = U.addClassName(tab.prop, "item");
          tabProp = U.mergeProp(tabProp, {
            "data-tab": tab.tabName
          });
          if (tab.tabName === this.props.active) {
            tabProp = U.addClassName(tabProp, "active");
          }
          tabProp.key = tab.tabName;
          results$.push(_a(tabProp, tab.text));
        }
        return results$;
      }.call(this))));
      res$ = [];
      for (i$ = 0, len$ = (ref$ = this.props.tabs).length; i$ < len$; ++i$) {
        tab = ref$[i$];
        prop = {
          className: "tab",
          "data-tab": tab.tabName
        };
        if (tab.tabName === this.props.active) {
          prop = U.addClassName(prop, "active");
        }
        prop.key = tab.tabName;
        res$.push(_(ui, prop, tab.dom));
      }
      tabs = res$;
      return _(ui, {}, [menu].concat(tabs));
    }
  });
  out$.labelField = labelField = R.createClass({
    displayName: 'label-field',
    render: function(){
      var text, ref$, ref1$;
      text = (ref1$ = (ref$ = this.props).text, delete ref$.text, ref1$);
      return _(field, this.props, [_label({}, text)].concat(this.props.children));
    }
  });
  out$.dropdown = dropdown = R.createClass({
    displayName: 'dropdown',
    componentDidMount: function(){
      return $(".dropdown.ui").dropdown();
    },
    render: function(){
      var uiProps, key, val;
      uiProps = U.addClassName(this.props, "dropdown");
      return _(ui, uiProps, _input({
        type: 'hidden',
        name: this.props.name
      }), _div({
        className: "default text"
      }, this.props['default']), _i({
        className: "dropdown icon"
      }), _div({
        className: "menu"
      }, (function(){
        var ref$, results$ = [];
        for (key in ref$ = this.props.options) {
          val = ref$[key];
          results$.push(_div({
            className: "item",
            "data-value": key,
            key: key
          }, val));
        }
        return results$;
      }.call(this))));
    }
  });
}).call(this);

},{"./utils":25,"react/addons":"react/addons"}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, onRefreshProblemList, E, U, I, log, linkList, selector;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  onRefreshProblemList = require('../../actions').onRefreshProblemList;
  E = require('../elements');
  U = require('../utils');
  I = require('immutable');
  log = debug('dollast:component:problem:list');
  linkList = createClass({
    displayName: 'link-list',
    render: function(){
      var elem;
      return _div({
        className: "ui very relaxed divided link list"
      }, (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = this.props.list).length; i$ < len$; ++i$) {
          elem = ref$[i$];
          results$.push(_a({
            className: "item",
            href: elem.href,
            key: elem.href
          }, _div({
            className: "ui left floated icon"
          }, _i({
            className: "icon check"
          }), _i({
            className: "icon remove"
          })), _div({
            className: "ui right floated"
          }, elem.right), _div({
            className: 'description'
          }, elem.desc)));
        }
        return results$;
      }.call(this)));
    }
  });
  selector = function(state){
    return {
      probList: state.getIn(['problem', 'list'], I.fromJS([]))
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'prob-list',
    componentDidMount: function(){
      return this.props.dispatch(onRefreshProblemList());
    },
    render: function(){
      var probList, res$, i$, ref$, len$, prob;
      res$ = [];
      for (i$ = 0, len$ = (ref$ = this.props.probList.toJS()).length; i$ < len$; ++i$) {
        prob = ref$[i$];
        res$.push({
          href: "#/problem/" + prob._id,
          right: '',
          desc: prob.outlook.title
        });
      }
      probList = res$;
      return _div({
        className: "ui"
      }, _h1({
        className: "ui header dividing"
      }, "problem list"), _(E.tabMenu, {
        menuProps: {
          className: "secondary pointing"
        },
        active: 'all',
        tabs: [
          {
            tabName: 'all',
            text: 'All',
            prop: {
              className: 'blue'
            },
            dom: _(linkList, {
              list: probList
            })
          }, {
            tabName: 'solved',
            text: 'Solved',
            prop: {
              className: 'green'
            },
            dom: _(linkList, {
              list: probList
            })
          }, {
            tabName: 'unsolved',
            text: 'Unsolved',
            prop: {
              className: 'red'
            },
            dom: _(linkList, {
              list: probList
            })
          }
        ]
      }), _(E.iconText, {
        className: "right floated launch primary labeled",
        href: '#/problem/create',
        text: 'create',
        icon: 'plus'
      }));
    }
  }));
}).call(this);

},{"../../actions":1,"../elements":4,"../utils":25,"immutable":"immutable","react-redux":"react-redux","react/addons":"react/addons"}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, I, ref$, onUpdateProblem, onGetProblem, onUploadFiles, toClientFmt, field, iconText, labelField, dropdown, dropzone, log, selector;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  I = require('immutable');
  ref$ = require('../../actions'), onUpdateProblem = ref$.onUpdateProblem, onGetProblem = ref$.onGetProblem, onUploadFiles = ref$.onUploadFiles;
  toClientFmt = require('../utils').toClientFmt;
  ref$ = require('../elements'), field = ref$.field, iconText = ref$.iconText, labelField = ref$.labelField, dropdown = ref$.dropdown;
  dropzone = require('react-dropzone');
  log = debug('dollast:component:problem:modify');
  selector = function(state){
    return {
      problem: state.getIn(['problem', 'update'], I.Map({
        outlook: {},
        config: {
          timeLmt: 1,
          spaceLmt: 512,
          stkLmt: 4,
          outLmt: 10,
          dataset: []
        }
      }))
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'prob-modify',
    componentDidMount: function(){
      var $form, pid, that;
      $form = $('#problem-modify');
      $form.form({
        on: 'blur',
        fields: {
          title: {
            identifier: 'title',
            rules: [
              {
                type: 'minLength[2]',
                prompt: 'title minimum length is 2'
              }, {
                type: 'maxLength[63]',
                prompt: 'title length cannot exceed 63'
              }
            ]
          },
          rid: {
            identifier: 'rid',
            optional: true,
            rules: [{
              type: 'integer[1..]',
              prompt: '#rid must be a positive integer'
            }]
          },
          judger: {
            identifier: 'judger',
            rules: [{
              type: 'empty',
              prompt: 'please choose your judger'
            }]
          },
          timeLmt: {
            identifier: 'timeLmt',
            rules: [{
              type: 'positive',
              prompt: 'time limit must be positive'
            }]
          },
          spaceLmt: {
            identifier: 'spaceLmt',
            rules: [{
              type: 'positive',
              prompt: 'space limit must be positive'
            }]
          },
          stkLmt: {
            identifier: 'stkLmt',
            rules: [{
              type: 'positive',
              prompt: "stack limit must be positive"
            }]
          },
          outLmt: {
            identifier: 'outLmt',
            rules: [{
              type: 'positive',
              prompt: "output limit must be positive"
            }]
          },
          desc: {
            identifier: 'desc',
            rules: [{
              type: "maxLength[65535]",
              prompt: "description cannot be longer than 65535"
            }]
          },
          inFmt: {
            identifier: 'inFmt',
            rules: [{
              type: "maxLength[65535]",
              prompt: "input format cannot be longer than 65535"
            }]
          },
          outFmt: {
            identifier: 'outFmt',
            rules: [{
              type: "maxLength[65535]",
              prmopt: "output format cannot be longer than 65535"
            }]
          },
          sampleIn: {
            identifier: 'sampleIn',
            rules: [{
              type: "maxLength[65535]",
              prompt: "sample input cannot be longer than 65535"
            }]
          },
          sampleOut: {
            identifier: 'sampleOut',
            rules: [{
              type: "maxLength[65535]",
              prompt: "sample output cannot be longer than 65535"
            }]
          }
        },
        onSuccess: this.submit
      });
      if (this.props.params.pid) {
        this.props.dispatch(onGetProblem(this.props.params.pid, 'update', 'total'));
      }
      pid = (that = this.props.params.pid) ? parseInt(that) : 0;
      return this.setState({
        pid: pid
      });
    },
    submit: function(e){
      var $form, allValues;
      e.preventDefault();
      $form = $('#problem-modify');
      allValues = $form.form('get values');
      return this.props.dispatch(onUpdateProblem(this.state.pid, allValues));
    },
    updateForms: function(problem){
      var $form;
      $form = $('#problem-modify');
      return $form.form('set values', toClientFmt(problem.toJS()));
    },
    componentWillUpdate: function(nextProps, nextStates){
      return this.updateForms(nextProps.problem);
    },
    onDrop: function(files){
      return this.setState({
        files: files
      });
    },
    upload: function(){
      var files;
      files = this.state.files;
      if (files) {
        return this.props.dispatch(onUploadFiles(this.state.pid, files));
      }
    },
    render: function(){
      var problem, problemTitle, title, that, atom;
      problem = this.props.problem.toJS();
      problemTitle = this.props.problem.getIn(['outlook', 'title']);
      title = (that = this.props.params.pid) ? "Update Problem " + that + ". " + problemTitle : "Create Problem";
      return _div({
        className: "ui form segment",
        id: 'problem-modify'
      }, _h1({
        className: "ui centered"
      }, title), _div({
        className: "ui error message"
      }), _div({
        className: "ui three fields"
      }, _(labelField, {
        className: "eight wide",
        text: 'title'
      }, _div({
        className: "ui input"
      }, _input({
        name: 'title'
      }))), _(labelField, {
        className: "four wide",
        text: "round"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'rid',
        type: 'number',
        placeholder: "optional"
      }))), _(labelField, {
        className: "four wide",
        text: 'judger'
      }, _(dropdown, {
        className: 'selection',
        name: 'judger',
        'default': "Please choose a judger",
        options: {
          string: 'string',
          real: 'real',
          strict: 'strict',
          custom: 'custom'
        }
      }))), _div({
        className: "ui four fields"
      }, _(labelField, {
        text: "time limit (s)"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'timeLmt',
        type: 'number'
      }))), _(labelField, {
        text: "space limit (MB)"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'spaceLmt',
        type: 'number'
      }))), _(labelField, {
        text: "stack limit (MB)"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'stkLmt',
        type: 'number'
      }))), _(labelField, {
        text: "output limit (MB)"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'outLmt',
        type: 'number'
      })))), _(field, null, _(labelField, {
        text: 'description'
      }), _textarea({
        name: 'desc'
      })), _div({
        className: "ui two fields"
      }, _(labelField, {
        text: "input format"
      }, _textarea({
        name: 'inFmt'
      })), _(labelField, {
        text: "output format"
      }, _textarea({
        name: 'outFmt'
      }))), _div({
        className: "ui two fields"
      }, _(labelField, {
        text: "sample input"
      }, _textarea({
        name: 'sampleIn'
      })), _(labelField, {
        text: "sample output"
      }, _textarea({
        name: 'sampleOut'
      }))), _div({
        className: "ui divider"
      }), _(field, null, _(iconText, {
        icon: 'file',
        text: 'select',
        onClick: this.select
      }), _(iconText, {
        className: 'green',
        icon: 'upload',
        text: 'upload',
        onClick: this.upload
      }), _(iconText, {
        className: 'teal',
        icon: 'refresh',
        text: 'refresh',
        onClick: this.refresh
      }), _(iconText, {
        className: 'purple',
        icon: 'retweet',
        text: 'repair',
        onClick: this.repair
      })), _div({
        className: "ui two fields"
      }, _(field, {
        className: "four wide"
      }, _(dropzone, {
        onDrop: this.onDrop
      }, _div(null, "drop files here for click to select"))), _(field, {
        className: "twelve wide"
      }, _table({
        className: "ui table segment"
      }, _thead(null, _tr(null, _th(null, 'input'), _th(null, 'output'), _th(null, 'weight'), _th(null, ""))), _tbody(null, (function(){
        var i$, ref$, ref1$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = (ref1$ = problem.config) != null ? ref1$.dataset : void 8).length; i$ < len$; ++i$) {
          atom = ref$[i$];
          results$.push(_tr({
            key: atom.input
          }, _td(null, atom.input), _td(null, atom.output), _td(null, atom.weight), _td(null, _(iconText, {
            className: "right floated mini",
            icon: 'remove',
            text: 'remove',
            onClick: this.remove
          }))));
        }
        return results$;
      }.call(this)))))), _(field, null, _(iconText, {
        className: "primary floated submit",
        text: 'Save',
        icon: 'save'
      }), _(iconText, {
        className: "secondary floated",
        text: 'Back',
        icon: 'reply',
        href: "#/problem/" + this.props.params.pid
      })));
    }
  }));
}).call(this);

},{"../../actions":1,"../elements":4,"../utils":25,"immutable":"immutable","react-dropzone":"react-dropzone","react-redux":"react-redux","react/addons":"react/addons"}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, iconText, onGetProblem, U, I, log, selector, segmentBox;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  iconText = require('../elements').iconText;
  onGetProblem = require('../../actions').onGetProblem;
  U = require('../utils');
  I = require('immutable');
  log = debug('dollast:component:problem:show');
  selector = function(state){
    return {
      problem: state.getIn(['problem', 'show'], I.fromJS({
        outlook: {},
        config: {}
      }))
    };
  };
  segmentBox = createClass({
    displayName: 'segment-box',
    render: function(){
      return _div({
        className: "ui segment"
      }, _div({
        className: "ui top left attached label teal"
      }, this.props.desc), this.props.children);
    }
  });
  module.exports = connect(selector)(createClass({
    displayName: 'prob-show',
    refreshMathjax: function(root){
      return MathJax.Hub.Queue(['Typeset', MathJax.Hub]);
    },
    componentWillMount: function(root){
      this.props.dispatch(onGetProblem(this.props.params.pid, 'show'));
      return this.refreshMathjax(root);
    },
    componentDidUpdate: function(props, states, root){
      return this.refreshMathjax(root);
    },
    render: function(){
      var pid, problem, ref$, ref1$, ref2$, ref3$, ref4$;
      pid = this.props.params.pid;
      problem = this.props.problem.toJS();
      return _div({
        className: "ui"
      }, _h1({
        className: "ui centered"
      }, "Problem " + pid + ". " + problem.outlook.title), _p(null, "time limit: " + ((problem.config || (problem.config = {})).timeLmt || '') + " space limit: " + ((problem.config || (problem.config = {})).spaceLmt || '')), _(segmentBox, {
        desc: 'description'
      }, _p({
        mathjax: true
      }, (ref$ = problem.outlook) != null ? ref$.desc : void 8)), _div({
        className: "ui two column grid"
      }, _div({
        className: 'row'
      }, _div({
        className: 'column'
      }, _(segmentBox, {
        desc: "input format"
      }, _p(null, (ref1$ = problem.outlook) != null ? ref1$.inFmt : void 8))), _div({
        className: 'column'
      }, _(segmentBox, {
        desc: "output format"
      }, _p(null, (ref2$ = problem.outlook) != null ? ref2$.outFmt : void 8)))), _div({
        className: 'row'
      }, _div({
        className: 'column'
      }, _(segmentBox, {
        desc: "sample input"
      }, _pre(null, (ref3$ = problem.outlook) != null ? ref3$.sampleIn : void 8))), _div({
        className: 'column'
      }, _(segmentBox, {
        desc: "sample output"
      }, _pre(null, (ref4$ = problem.outlook) != null ? ref4$.sampleOut : void 8))))), _div({
        className: "ui divider"
      }), _(iconText, {
        className: 'primary',
        href: "#/solution/submit/" + pid,
        text: 'submit',
        icon: 'rocket'
      }), _(iconText, {
        className: 'orange',
        href: "#/problem/" + pid + "/modify",
        text: 'modify',
        icon: 'edit'
      }), _(iconText, {
        className: 'purple',
        href: "#/problem/" + pid + "/stat",
        text: 'statistics',
        icon: "bar chart"
      }));
    }
  }));
}).call(this);

},{"../../actions":1,"../elements":4,"../utils":25,"immutable":"immutable","react-redux":"react-redux","react/addons":"react/addons"}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R;
  R = require('react/addons');
  module.exports = R.createClass({
    displayName: 'prob-stat',
    render: function(){
      return _p(null, "prob-stat");
    }
  });
}).call(this);

},{"react/addons":"react/addons"}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R;
  R = require('react/addons');
  module.exports = R.createClass({
    displayName: 'rnd-board',
    render: function(){
      return _p({}, "rnd-board");
    }
  });
}).call(this);

},{"react/addons":"react/addons"}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, I, ref$, dropdown, iconText, log;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  I = require('immutable');
  ref$ = require('../elements'), dropdown = ref$.dropdown, iconText = ref$.iconText;
  log = debug('dollast:component:round:list');
  module.exports = createClass({
    displayName: 'rnd-list',
    filter: function(value, text, $choice){
      return log({
        value: value,
        text: text,
        $choice: $choice
      });
    },
    componentDidMount: function(){
      var $filter;
      $filter = $('.dropdown');
      log($filter);
      $filter.dropdown({
        on: 'hover',
        onChange: this.filter
      });
      return $filter.dropdown('set text', 'all');
    },
    render: function(){
      return _div({
        className: 'ui'
      }, _h1({
        className: "ui header dividing"
      }, 'rounds'), _(dropdown, {
        className: "floated pointing button labeled icon",
        name: 'filter',
        'default': "please select filter",
        options: {
          'all': 'all',
          'past': 'past',
          'running': 'running',
          'pending': 'pending'
        }
      }), _(iconText, {
        className: "launch primary right floated",
        text: 'create',
        icon: 'plus',
        href: '#/round/create'
      }));
    }
  });
}).call(this);

},{"../elements":4,"immutable":"immutable","react-redux":"react-redux","react/addons":"react/addons"}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, ref$, labelField, iconText, iconInput, connect, I, onGetRound, onAddProbToRound, log, selector;
  createClass = require('react/addons').createClass;
  ref$ = require('../elements'), labelField = ref$.labelField, iconText = ref$.iconText, iconInput = ref$.iconInput;
  connect = require('react-redux').connect;
  I = require('immutable');
  ref$ = require('../../actions'), onGetRound = ref$.onGetRound, onAddProbToRound = ref$.onAddProbToRound;
  log = debug('dollast:component:round:modify');
  selector = function(state){
    return {
      round: state.getIn(['round', 'update'], I.Map({
        probs: []
      }))
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'rnd-modify',
    componentWillMount: function(){
      if (this.props.params.rid) {
        return this.props.dispatch(onGetRound(this.props.params.rid, 'update', 'total'));
      }
    },
    insertProb: function(pid){
      pid = parseInt(pid);
      if (Number.isInteger(pid)) {
        return this.props.dispatch(onAddProbToRound(pid));
      }
    },
    handleInput: function(evt){
      if (evt.which === 13) {
        this.insertProb(evt.target.value);
        return evt.target.value = '';
      }
    },
    onAddProb: function(){
      var $input;
      $input = $('#pid');
      return this.insertProb($input[0].value);
    },
    render: function(){
      var round, prob;
      round = this.props.round.toJS();
      return _div({
        className: "ui form segment"
      }, _h1({
        className: "ui header dividing"
      }, "Round"), _div({
        className: "ui fields three"
      }, _(labelField, {
        text: 'title'
      }, _div({
        className: "ui input"
      }, _input({
        name: 'title'
      }))), _(labelField, {
        text: "start from"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'begTime'
      }))), _(labelField, {
        text: "end at"
      }, _div({
        className: "ui input"
      }, _input({
        name: 'endTime'
      })))), _h2({
        className: "ui header dividing"
      }, 'problemset'), _div({
        className: "ui two fields"
      }, _div({
        className: "field"
      }, _table({
        className: "ui table segment definition"
      }, _thead(null, _tr(null, _th({
        className: 'collapsing'
      }, ""), _th(null, 'pid'))), _tbody(null, (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = round.probs).length; i$ < len$; ++i$) {
          prob = ref$[i$];
          results$.push(_tr({
            key: prob
          }, _td(null, _div({
            className: "ui icon button"
          }, _i({
            className: "icon mini remove"
          }))), _td(null, prob._id + ". " + prob.outlook.title)));
        }
        return results$;
      }())), _tfoot(null, _tr(null, _th(null, ""), _th(null, _div({
        className: "ui input action"
      }, _input({
        name: 'pid',
        id: 'pid',
        onChange: this.handleInput
      }), _(iconText, {
        className: "floated right",
        icon: "chevron right",
        text: 'add',
        onClick: this.onAddProb
      })))))))), _div({
        className: 'field'
      }, _(iconText, {
        className: "floated right red",
        text: 'delete',
        icon: 'delete',
        onClick: this['delete']
      }), _(iconText, {
        className: "floated right secondary",
        text: 'cancel',
        icon: 'cancel'
      }), _(iconText, {
        className: "floated right primary",
        text: 'save',
        icon: 'save',
        onClick: this.submit
      })));
    }
  }));
}).call(this);

},{"../../actions":1,"../elements":4,"immutable":"immutable","react-redux":"react-redux","react/addons":"react/addons"}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R;
  R = require('react/addons');
  module.exports = R.createClass({
    displayName: 'rnd-show',
    render: function(){
      return _p({}, "rnd-show");
    }
  });
}).call(this);

},{"react/addons":"react/addons"}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R, ref$, Route, IndexRoute, T, D;
  R = require('react/addons');
  ref$ = require('react-router'), Route = ref$.Route, IndexRoute = ref$.IndexRoute;
  T = Route;
  D = IndexRoute;
  module.exports = function(app){
    return _(T, {
      path: '/',
      component: app
    }, _(D, {
      component: require('./site/index')
    }), _(T, {
      path: 'about',
      component: require('./site/about')
    }), _(T, {
      path: 'login',
      component: require('./site/login')
    }), _(T, {
      path: 'problem'
    }, _(D, {
      component: require('./problem/list')
    }), _(T, {
      path: 'create',
      component: require('./problem/modify')
    }), _(T, {
      path: ":pid"
    }, _(D, {
      component: require('./problem/show')
    }), _(T, {
      path: 'modify',
      component: require('./problem/modify')
    }), _(T, {
      path: 'stat',
      component: require('./problem/stat')
    }))), _(T, {
      path: 'solution'
    }, _(D, {
      component: require('./solution/list')
    }), _(T, {
      path: "submit/:pid",
      component: require('./solution/submit')
    }), _(T, {
      path: "user/:uid",
      component: require('./solution/list')
    }), _(T, {
      path: ":sid",
      component: require('./solution/show')
    })), _(T, {
      path: 'round'
    }, _(D, {
      component: require('./round/list')
    }), _(T, {
      path: 'create',
      component: require('./round/modify')
    }), _(T, {
      path: ":rid"
    }, _(D, {
      component: require('./round/show')
    }), _(T, {
      path: 'modify',
      component: require('./round/modify')
    }), _(T, {
      path: 'board',
      component: require('./round/board')
    }))), _(T, {
      path: 'user'
    }, _(D, {
      component: require('./user/show')
    }), _(T, {
      path: 'register',
      component: require('./user/register')
    }), _(T, {
      path: ":uid"
    }, _(D, {
      component: require('./user/show')
    }), _(T, {
      path: 'modify',
      component: require('./user/modify')
    }))));
  };
}).call(this);

},{"./problem/list":5,"./problem/modify":6,"./problem/show":7,"./problem/stat":8,"./round/board":9,"./round/list":10,"./round/modify":11,"./round/show":12,"./site/about":14,"./site/index":16,"./site/login":17,"./solution/list":19,"./solution/show":20,"./solution/submit":21,"./user/modify":22,"./user/register":23,"./user/show":24,"react-router":"react-router","react/addons":"react/addons"}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R, P, hiddenItems, faqItem;
  R = require('react/addons');
  P = require('prelude-ls');
  hiddenItems = R.createClass({
    dispayName: 'hidden-items',
    render: function(){
      var text;
      return _div({}, (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = this.props.text).length; i$ < len$; ++i$) {
          text = ref$[i$];
          results$.push(_p({
            key: text.id
          }, text));
        }
        return results$;
      }.call(this)));
    }
  });
  faqItem = R.createClass({
    dispayName: 'faq-item',
    render: function(){
      return _div({}, _h3({}, this.props.question), _h4({}, this.props.answer), _(hiddenItems, {
        text: this.props.hidden
      }), _br({}));
    }
  });
  module.exports = R.createClass({
    displayName: 'about',
    render: function(){
      var todos, todo;
      todos = ["user register", "sols for a prob", "user profile", "request system", "comment system(disqus)", "test a program"];
      return _div({}, _p({}, "Hi 小朋友们大家好，还记得我是谁吗，对了我就是青年理论计算机科学家 BBL ！（背景音乐：我可是世界上最厉害的……）"), _p({}, "为了答谢广大人民群众对我的厚爱，以及老师们拉着我非要我写一个 OJ 出来，我就花了几个星期码了这样一个网站出来 →_→ "), _(faqItem, {
        question: "Q: 为何这网站如此具有朴素简洁美？",
        answer: "A: 朴实沉毅乃校训，不可忘怀。（其实是我懒得做 UI 了 = =）",
        hidden: ["有兴趣的同学可以自己设计一套 UI 给我……聪明的同学已经发现了我网站的架构了：每次 get 一个网页作为模板，所以只需要写一套 partials 里面的东西就可以了……", "我才不会告诉你们我早就写好了 theme 功能，就差一个美工了 →_→"]
      }), _(faqItem, {
        question: "Q: 为什么要起一个 dollast 这种中二的名字？",
        answer: "A: 我也不知道你快来咬我呀哈哈哈哈…… 因为这边儿名字是 YXJ 起的 →_→",
        hidden: ["其实我早就做好了准备，要改名字只要一行命令就可以了 233"]
      }), _(faqItem, {
        question: "Q: 那请问贵站有哪些特性？",
        answer: "A: 终于有人肯问一个正常点的问题了！我们目前只支持两个特性：1. 朴素 2. 不能评测……因为没写完。",
        hidden: ["我的美妙的寒假全葬送在这个网站上了……说好的青年理论计算机科学家呢 →_→"]
      }), _(faqItem, {
        question: "Q: 你写这个 OJ ，是不是要钦点成为 CJ 的校内 OJ？",
        answer: "A: 我没有任何这个意思。你们有一个好，刷题刷的比谁都快，但是问来问去的问题，too simple。西方的那个 OJ 我没用过？美国的 SPOJ，不知道比你们快到哪去了，我用的谈笑风生。你们啊，too young，sometimes naive。",
        hidden: ["再问我就烂尾啦 = ="]
      }), _(faqItem, {
        question: "Q: 那么具体说来你用的是怎样一个架构？",
        answer: "A: M(ongoDB)A(ngularjs)N(odejs)K(oa) ，外加一个 cpp 作为沙盒。目前发现没什么代码量……",
        hidden: ["据说码代码的时间只要学习新姿势的一半，学习新姿势的时间只要调试的一半"]
      }), _h3({}, "todo list"), _ul({}, (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = todos).length; i$ < len$; ++i$) {
          todo = ref$[i$];
          results$.push(_li({
            key: todo.id
          }, todo));
        }
        return results$;
      }())));
    }
  });
}).call(this);

},{"prelude-ls":"prelude-ls","react/addons":"react/addons"}],15:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R, E;
  R = require('react/addons');
  E = require('../elements');
  module.exports = R.createClass({
    displayName: 'footer',
    render: function(){
      return _(E.ui, {
        className: "divider grid horizontal"
      }, "Yuping Luo @ 2015");
    }
  });
}).call(this);

},{"../elements":4,"react/addons":"react/addons"}],16:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R;
  R = require('react/addons');
  module.exports = R.createClass({
    dispayName: 'index',
    render: function(){
      return _div({}, _h1({
        className: "ui dividing header"
      }, "welcome"), _h3({
        className: "ui"
      }, "this is dollast, an buggy online judge."));
    }
  });
}).call(this);

},{"react/addons":"react/addons"}],17:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, E, A, log;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  E = require('../elements');
  A = require('../../actions');
  log = debug('dollast:component:login');
  module.exports = connect()(createClass({
    displayName: 'login',
    componentDidMount: function(){
      return $('#login-form').form({
        on: 'blur',
        fields: {
          uid: {
            identifier: 'uid',
            rules: [
              {
                type: 'minLength[6]',
                prompt: "User name must be longer than 5"
              }, {
                type: 'maxLength[16]',
                prompt: "User name must be shorter than 15"
              }
            ]
          },
          pswd: {
            identifier: 'pswd',
            rules: [
              {
                type: 'minLength[6]',
                prompt: 'password length must be longer than 5'
              }, {
                type: 'maxLength[16]',
                prompt: 'password length must be shorter than 15'
              }
            ]
          }
        },
        onSuccess: this.submit,
        debug: true
      });
    },
    submit: function(e){
      var $form;
      e.preventDefault();
      $form = $('#login-form');
      return this.props.dispatch(A.onLogin($form.form('get values')));
    },
    render: function(){
      return _div({
        className: "ui"
      }, _h1({
        className: "ui dividing header"
      }, "Login"), _form({
        className: "ui form segment relaxed",
        id: "login-form"
      }, _(E.field, null, _(E.iconInput, {
        className: "left",
        icon: 'user',
        input: {
          placeholder: "user id",
          name: "uid"
        }
      })), _(E.field, null, _(E.iconInput, {
        className: "left",
        icon: 'lock',
        input: {
          placeholder: 'password',
          name: "pswd",
          type: 'password'
        }
      })), _(E.iconText, {
        className: "left primary labeled submit",
        icon: "sign in",
        text: 'Login'
      }), _div({
        className: "ui error message"
      })));
    }
  }));
}).call(this);

},{"../../actions":1,"../elements":4,"react-redux":"react-redux","react/addons":"react/addons"}],18:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, ref$, labeledIcon, iconInput, log, navbarUserState;
  createClass = require('react/addons').createClass;
  ref$ = require('../elements'), labeledIcon = ref$.labeledIcon, iconInput = ref$.iconInput;
  log = debug('dollast:navbar');
  navbarUserState = createClass({
    displayName: 'navbar-user-state',
    render: function(){
      var uid, search, this$ = this;
      uid = this.props.uid;
      search = _div({
        className: 'item'
      }, _(iconInput, {
        icon: "search link",
        input: {
          placeholder: "ID or Search"
        },
        className: "inverted small"
      }));
      if (uid) {
        return _div({
          className: "right menu"
        }, search, _(labeledIcon, {
          icon: 'user',
          text: this.props.uid,
          href: "#/user/" + uid
        }), _(labeledIcon, {
          icon: "sign out",
          text: "Logout",
          onClick: function(e){
            e.preventDefault();
            return this$.props.onLogout();
          }
        }));
      } else {
        return _div({
          className: "right menu"
        }, search, _(labeledIcon, {
          icon: "sign in",
          text: 'Login',
          href: "#/login"
        }), _(labeledIcon, {
          icon: 'signup',
          text: 'Register',
          href: "#/user/register"
        }));
      }
    }
  });
  module.exports = createClass({
    displayName: 'navbar',
    render: function(){
      return _div({
        className: "row"
      }, _div({
        className: "ui blue inverted page grid borderless menu"
      }, _div({
        className: "header item"
      }, 'dollast'), _(labeledIcon, {
        icon: 'home',
        text: 'Home',
        href: "#/"
      }), _(labeledIcon, {
        icon: 'browser',
        text: 'Problem',
        href: "#/problem"
      }), _(labeledIcon, {
        icon: "info circle",
        text: 'Status',
        href: "#/solution"
      }), _(labeledIcon, {
        icon: 'user',
        text: 'Contest',
        href: "#/round"
      }), _(labeledIcon, {
        icon: "help circle",
        text: 'About',
        href: "#/about"
      }), _(navbarUserState, {
        uid: this.props.uid,
        onLogout: this.props.onLogout
      })));
    }
  });
}).call(this);

},{"../elements":4,"react/addons":"react/addons"}],19:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, iconText, onGetSolutionsList, I, selector;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  iconText = require('../elements').iconText;
  onGetSolutionsList = require('../../actions').onGetSolutionsList;
  I = require('immutable');
  selector = function(state){
    return {
      sols: state.getIn(['solution', 'list'], I.fromJS([]))
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'sol-list',
    componentWillMount: function(){
      return this.props.dispatch(onGetSolutionsList());
    },
    render: function(){
      var sols, sol;
      sols = this.props.sols.toJS();
      return _div(null, _h1({
        className: "ui dividing header"
      }, 'status'), _table({
        className: "ui table segment large green selectable"
      }, _thead(null, _tr(null, _th({
        className: "collapsing right"
      }, "sol id"), _th(null, 'problem'), _th(null, 'user'), _th(null, 'status'), _th(null, 'score'), _th(null, "time(s)"), _th(null, "space(MB)"), _th({
        className: "collapsing"
      }, 'lang'), _th({
        className: "collapsing"
      }, 'round'))), _tbody(null, (function(){
        var i$, ref$, len$, ref1$, results$ = [];
        for (i$ = 0, len$ = (ref$ = sols).length; i$ < len$; ++i$) {
          sol = ref$[i$];
          results$.push(_tr({
            className: 'red',
            key: sol._id
          }, _td(null, _(iconText, {
            className: "mini green",
            icon: 'code',
            text: sol._id,
            href: "#/solution/" + sol._id
          })), _td(null, _a({
            href: "#/problem/" + sol.prob._id
          }, sol.prob._id + ". " + sol.prob.outlook.title)), _td(null, _a({
            href: "#/user/" + sol.user
          }, sol.user)), _td(null, sol.final.status), _td(null, sol.final.score), _td(null, sol.final.time), _td(null, sol.final.space), _td(null, sol.lang), _td(null, (ref1$ = sol.round) != null ? ref1$._id : void 8)));
        }
        return results$;
      }()))), _(iconText, {
        className: "floated right primary",
        text: 'refresh',
        icon: 'refresh',
        onClick: this.refresh
      }));
    }
  }));
}).call(this);

},{"../../actions":1,"../elements":4,"immutable":"immutable","react-redux":"react-redux","react/addons":"react/addons"}],20:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, iconText, onGetSolution, U, I, highlight, log, selector;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  iconText = require('../elements').iconText;
  onGetSolution = require('../../actions').onGetSolution;
  U = require('../utils');
  I = require('immutable');
  highlight = require('react-highlight');
  log = debug('dollast:component:solution:show');
  selector = function(state){
    return {
      sol: state.getIn(['solution', 'show'], I.fromJS({
        final: {},
        results: []
      }))
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'sol-show',
    componentWillMount: function(){
      return this.props.dispatch(onGetSolution(this.props.params.sid));
    },
    render: function(){
      var sol, result;
      sol = this.props.sol.toJS();
      return _div(null, _h3({
        className: "ui header"
      }, "author: " + sol.user), _h3({
        className: "ui header"
      }, "lang: " + sol.lang), _h3({
        className: "ui header"
      }, "problem:", _span(null, sol.prob)), (function(){
        switch (sol.final.status) {
        case 'private':
          return _p(null, "this code is private");
        case 'CE':
          return _div(null, _p(null, "compile message:"), _pre(null, sol.final.message));
        case 'running':
          return _div({
            className: 'ui'
          }, 'running');
        default:
          return _div(null, _div({
            className: "ui toggle checkbox"
          }, _input({
            type: 'checkbox'
          }, _label("Current state: " + (open ? 'public' : 'private')))), _div({
            className: 'ui'
          }, _h1({
            className: "ui header dividing"
          }, 'details'), _table({
            className: "ui table segment"
          }, _thead(null, _tr(null, _th(null, 'input'), _th(null, 'status'), _th(null, 'time'), _th(null, 'space'), _th(null, 'score'), _th(null, 'message'))), _tbody(null, (function(){
            var i$, ref$, len$, results$ = [];
            for (i$ = 0, len$ = (ref$ = sol.results).length; i$ < len$; ++i$) {
              result = ref$[i$];
              results$.push(_tr({
                className: 'positive',
                key: result.input
              }, _td(null, result.input), _td(null, result.status), _td(null, result.time), _td(null, result.space), _td(null, result.score), _td(null, result.message)));
            }
            return results$;
          }())), _tfoot(null, _tr(null, _th(null, 'final result'), _th(null, sol.final.status), _th(null, sol.final.time), _th(null, sol.final.space), _th(null, sol.final.score), _th(null, sol.final.message))))));
        }
      }()), _h1({
        className: "ui header dividing"
      }, 'code'), _pre(null, _(highlight, {
        className: sol.lang
      }, sol.code)));
    }
  }));
}).call(this);

},{"../../actions":1,"../elements":4,"../utils":25,"immutable":"immutable","react-highlight":"react-highlight","react-redux":"react-redux","react/addons":"react/addons"}],21:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, onSubmitSolution, ref$, field, labelField, dropdown, iconText, I, log, selector;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  onSubmitSolution = require('../../actions').onSubmitSolution;
  ref$ = require('../elements'), field = ref$.field, labelField = ref$.labelField, dropdown = ref$.dropdown, iconText = ref$.iconText;
  I = require('immutable');
  log = debug('dollast:component:solution:submit');
  selector = function(state){
    return {
      uid: state.getIn(['session', 'uid'], "guest")
    };
  };
  module.exports = connect(selector)(createClass({
    displayName: 'sol-submit',
    componentDidMount: function(){
      var $form;
      $form = $('#solution-submit');
      return $form.form({
        on: 'blur',
        fields: {
          code: {
            identifier: 'code',
            rules: [
              {
                type: 'minLength[4]',
                prompt: 'code minimum length is 4'
              }, {
                type: 'maxLength[65535]',
                prompt: 'code length cannot exceed 65535'
              }
            ]
          },
          lang: {
            identifier: 'lang',
            rules: [{
              type: 'empty',
              prompt: 'language cannot be empty'
            }]
          }
        },
        onSuccess: this.submit
      });
    },
    submit: function(e){
      var $form, allValues, data;
      e.preventDefault();
      $form = $('#solution-submit');
      allValues = $form.form('get values');
      data = importAll$(allValues, {
        pid: this.props.params.pid,
        uid: this.props.uid
      });
      return this.props.dispatch(onSubmitSolution(data));
    },
    render: function(){
      return _div({
        className: "ui form segment relaxed",
        id: 'solution-submit'
      }, _(field, null, _h1({
        className: "header divided"
      }, "problem: " + this.props.params.pid)), _div({
        className: "ui error message"
      }), _(labelField, {
        text: 'code'
      }, _textarea({
        name: 'code'
      })), _div({
        className: "ui two fields"
      }, _(labelField, {
        text: 'language'
      }, _(dropdown, {
        className: 'selection',
        name: 'lang',
        'default': "please select your language",
        options: {
          cpp: 'cpp',
          pas: 'pas',
          java: 'java'
        }
      }))), _(field, null, _(iconText, {
        className: "primary floated submit",
        text: 'Submit',
        icon: 'rocket'
      })));
    }
  }));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"../../actions":1,"../elements":4,"immutable":"immutable","react-redux":"react-redux","react/addons":"react/addons"}],22:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R;
  R = require('react/addons');
  module.exports = R.createClass({
    displayName: 'user-modify',
    render: function(){
      return _p({}, "user-modify");
    }
  });
}).call(this);

},{"react/addons":"react/addons"}],23:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var createClass, connect, ref$, iconText, iconInput, A, log;
  createClass = require('react/addons').createClass;
  connect = require('react-redux').connect;
  ref$ = require('../elements'), iconText = ref$.iconText, iconInput = ref$.iconInput;
  A = require('../../actions');
  log = debug('dollast:component:login');
  module.exports = connect()(createClass({
    displayName: 'register',
    componentDidMount: function(){
      return $('#register-form').form({
        on: 'blur',
        fields: {
          uid: {
            identifier: 'uid',
            rules: [
              {
                type: 'minLength[3]',
                prompt: "User name must be longer than 5"
              }, {
                type: 'maxLength[16]',
                prompt: "User name must be shorter than 15"
              }
            ]
          },
          pswd: {
            identifier: 'pswd',
            rules: [
              {
                type: 'minLength[3]',
                prompt: 'password length must be longer than 5'
              }, {
                type: 'maxLength[16]',
                prompt: 'password length must be shorter than 15'
              }
            ]
          },
          email: {
            identifier: 'email',
            rules: [{
              type: 'email',
              prompt: 'please enter a valid email address'
            }]
          }
        },
        onSuccess: this.submit,
        debug: true
      });
    },
    submit: function(e){
      var $form, allValues;
      e.preventDefault();
      $form = $('#register-form');
      allValues = $form.form('get values');
      return A.onRegister(allValues);
    },
    render: function(){
      return _div({
        className: "ui"
      }, _h1({
        className: "ui dividing header"
      }, "Register"), _form({
        className: "ui form segment relaxed",
        id: "register-form"
      }, _div({
        className: "ui field"
      }, _(iconInput, {
        className: "left",
        icon: 'user',
        input: {
          placeholder: "user id",
          name: "uid"
        }
      })), _div({
        className: "ui field"
      }, _(iconInput, {
        className: "left",
        icon: 'lock',
        input: {
          placeholder: 'password',
          name: "pswd",
          type: 'password'
        }
      })), _div({
        className: "field"
      }, _(iconInput, {
        className: "left",
        icon: 'mail',
        input: {
          placeholder: "abc@xyz",
          name: 'email',
          type: 'email'
        }
      })), _(iconText, {
        className: "left primary labeled submit",
        icon: "sign in",
        text: 'Register'
      }), _div({
        className: "ui error message"
      })));
    }
  }));
}).call(this);

},{"../../actions":1,"../elements":4,"react-redux":"react-redux","react/addons":"react/addons"}],24:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R;
  R = require('react/addons');
  module.exports = R.createClass({
    displayName: 'user-show',
    render: function(){
      return _p({}, "user-show");
    }
  });
}).call(this);

},{"react/addons":"react/addons"}],25:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var mergeProp, getAttr, addAttr, addClassName, toServerFmt, toClientFmt, flattenObject, out$ = typeof exports != 'undefined' && exports || this;
  out$.mergeProp = mergeProp = function(x, y){
    var key, val;
    x = import$(clone$({}), x);
    for (key in y) {
      val = y[key];
      if (x[key]) {
        x[key] = x[key] + " " + val;
      } else {
        x[key] = val;
      }
    }
    return x;
  };
  out$.getAttr = getAttr = function(x, attrs){
    var z, i$, len$, attr;
    z = {};
    for (i$ = 0, len$ = attrs.length; i$ < len$; ++i$) {
      attr = attrs[i$];
      if (x[attr]) {
        z[attr] = x[attr];
      }
    }
    return z;
  };
  out$.addAttr = addAttr = function(x, y, attrs){
    return mergeProp(x, getAttr(y, attrs));
  };
  out$.addClassName = addClassName = function(obj, className){
    return mergeProp(obj, {
      className: className
    });
  };
  out$.toServerFmt = toServerFmt = function(obj){
    var outlook, config;
    outlook = {
      title: obj.title,
      desc: obj.desc,
      inFmt: obj.inFmt,
      outFmt: obj.outFmt,
      sampleIn: obj.sampleIn,
      sampleOut: obj.sampleOut
    };
    config = {
      rid: obj.rid,
      pid: obj.pid,
      judger: obj.judger,
      timeLmt: obj.timeLmt,
      spaceLmt: obj.spaceLmt,
      outLmt: obj.outLmt,
      stkLmt: obj.stkLmt
    };
    if (config.rid === "") {
      delete config.rid;
    } else {
      config.rid = parseInt(config.rid);
    }
    config.timeLmt = parseFloat(config.timeLmt);
    config.spaceLmt = parseFloat(config.spaceLmt);
    config.outLmt = parseFloat(config.outLmt);
    config.stkLmt = parseFloat(config.stkLmt);
    return {
      outlook: outlook,
      config: config
    };
  };
  out$.toClientFmt = toClientFmt = function(obj){
    return flattenObject(obj);
  };
  out$.flattenObject = flattenObject = function(obj){
    var ret, key, val;
    ret = {};
    for (key in obj) {
      val = obj[key];
      if ('object' === typeof val) {
        import$(ret, flattenObject(val));
      } else {
        ret[key] = val;
      }
    }
    return ret;
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);

},{}],26:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var R, co, debug, key, ref$, value;
  R = require('react/addons');
  co = require('co');
  debug = require('debug');
  window._ = R.createElement;
  for (key in ref$ = R.DOM) {
    value = ref$[key];
    window["_" + key] = value;
  }
  window.debug = debug;
  debug.enable("dollast:*");
  $.fn.form.settings.rules.positive = function(text){
    return 0 < parseFloat(text);
  };
  $.ajaxSetup({
    contentType: 'application/json'
  });
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [['$', '$'], ['\\(', '\\)']]
    }
  });
}).call(this);

},{"co":"co","debug":"debug","react/addons":"react/addons"}],27:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var combineReducers, handleActions, I, auth, A, log, initState, loadFromTokenReducer, defaultThrow, useDefaultThrow, rootReducer, out$ = typeof exports != 'undefined' && exports || this;
  combineReducers = require('redux').combineReducers;
  handleActions = require('redux-actions').handleActions;
  I = require('immutable');
  auth = require('../utils/auth');
  A = require('../actions');
  log = debug('dollast:reducers');
  out$.initState = initState = I.fromJS({
    session: {
      guest: true
    }
  });
  loadFromTokenReducer = function(state, action){
    var token, payload, clientInfo;
    token = action.payload;
    payload = auth.jwt.dec(token);
    localStorage.token = token;
    clientInfo = JSON.parse(payload.client);
    return state.set('session', I.fromJS({
      guest: false,
      token: token,
      uid: clientInfo.uid
    }));
  };
  defaultThrow = function(state, action){
    log('error found:', action.payload.message, 'with', {
      state: state,
      action: action
    });
    return state;
  };
  useDefaultThrow = function(next){
    return {
      next: next,
      'throw': defaultThrow
    };
  };
  out$.rootReducer = rootReducer = handleActions({
    'load-from-token': loadFromTokenReducer,
    'register': useDefaultThrow(function(state, action){
      log('register', {
        action: action
      });
      return state;
    }),
    'login': useDefaultThrow(function(state, action){
      log({
        state: state,
        action: action
      });
      if (action.error) {
        return state;
      } else {
        return loadFromTokenReducer(state, {
          payload: action.payload.token
        });
      }
    }),
    'error': useDefaultThrow(function(state, action){
      return state;
    }),
    'logout': useDefaultThrow(function(state, action){
      return state.set('session', I.fromJS({
        guest: true
      }));
    }),
    'problem/refresh-list': useDefaultThrow(function(state, action){
      return state.setIn(['problem', 'list'], I.fromJS(action.payload));
    }),
    'problem/get': useDefaultThrow(function(state, action){
      return state.setIn(['problem', action.payload.load], I.fromJS(action.payload));
    }),
    'problem/update': useDefaultThrow(function(state, action){
      return state.setIn(['problem', 'update'], I.fromJS(action.payload));
    }),
    'solution/list': useDefaultThrow(function(state, action){
      return state.setIn(['solution', 'list'], I.fromJS(action.payload));
    }),
    'solution/get': useDefaultThrow(function(state, action){
      return state.setIn(['solution', 'show'], I.fromJS(action.payload));
    }),
    'round/get': useDefaultThrow(function(state, action){
      return state.setIn(['round', action.payload.load], I.fromJS(action.payload));
    }),
    'round/add-prob': useDefaultThrow(function(state, action){
      return state.updateIn(['round', 'update', 'probs'], function(probs){
        probs == null && (probs = I.List());
        return probs.push(action.payload);
      });
    })
  }, initState);
}).call(this);

},{"../actions":1,"../utils/auth":29,"immutable":"immutable","redux":"redux","redux-actions":"redux-actions"}],28:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var ref$, createStore, applyMiddleware, compose, promiseMiddleware, reduxThunk, createLogger, rootReducer, devTools, persistState, I, log, errorMiddleware, configureStore, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('redux'), createStore = ref$.createStore, applyMiddleware = ref$.applyMiddleware, compose = ref$.compose;
  promiseMiddleware = require('redux-promise');
  reduxThunk = require('redux-thunk');
  createLogger = require('redux-logger');
  rootReducer = require('../reducers').rootReducer;
  ref$ = require('redux-devtools'), devTools = ref$.devTools, persistState = ref$.persistState;
  I = require('immutable');
  log = debug('dollast:store');
  errorMiddleware = function(store){
    var dispatch, getState;
    dispatch = store.dispatch;
    getState = store.getState;
    return function(next){
      return function(action){
        var addJwt, payload, ref$, e;
        if (action instanceof Function) {
          addJwt = function(request){
            var token;
            token = getState().getIn(['session', 'token'], null);
            if (token) {
              return request = request.set('Authorization', "Bearer " + token);
            }
          };
          action(addJwt, dispatch, getState);
          return;
        }
        payload = action.payload;
        if (payload instanceof Error) {
          action.error = true;
        }
        if ((payload != null ? (ref$ = payload.constructor) != null ? ref$.name : void 8 : void 8) === 'Response') {
          action.payload = action.payload.body;
        }
        try {
          return next(action);
        } catch (e$) {
          e = e$;
          return log(e);
        }
      };
    };
  };
  out$.configureStore = configureStore = function(initState){
    var logger, finalCreateStore, store;
    logger = createLogger({
      transformer: function(state){
        return I.fromJS(state).toJS();
      }
    });
    finalCreateStore = compose(applyMiddleware(errorMiddleware, promiseMiddleware, logger), devTools(), persistState(window.location.href.match(/[?&]debug_session=([^&]+)\b/)));
    return store = finalCreateStore(createStore)(rootReducer, initState);
  };
}).call(this);

},{"../reducers":27,"immutable":"immutable","redux":"redux","redux-devtools":"redux-devtools","redux-logger":"redux-logger","redux-promise":"redux-promise","redux-thunk":"redux-thunk"}],29:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var pubKey, RSAEntity, log, ref$, out$ = typeof exports != 'undefined' && exports || this;
  pubKey = '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCV8qwyGUz1mKUNyMUXIb5THUYJ\n9Xf9WgL/GC5UeVon7JKtzeWXRSCmzxlO5XD4GD8zcJ728kNfABdizPQ1HG4MFfRc\ns5vPQDiIR23dafkGODmE039aKRiTc+xxrLgx3huasFan+2yG/tiFQbXEFfAmLaal\n6FuOukBTwitq0XBdiQIDAQAB\n-----END PUBLIC KEY-----';
  RSAEntity = forge.pki.publicKeyFromPem(pubKey);
  log = debug('dollast:auth');
  ref$ = out$;
  ref$.RSA = {
    enc: function(txt){
      return txt;
    },
    dec: function(cipher, key){
      return cipher;
    }
  };
  ref$.jwt = {
    enc: function(header, payload, key){
      var header64, payload64, unsignedToken, h, signature64, ret;
      if ('string' !== typeof header) {
        header = JSON.stringify(header);
      }
      if ('string' !== typeof payload) {
        payload = JSON.stringify(payload);
      }
      header64 = forge.util.encode64(header);
      payload64 = forge.util.encode64(payload);
      unsignedToken = header64 + "." + payload64;
      h = forge.hmac.create();
      h.start('sha256', key);
      h.update(unsignedToken);
      signature64 = forge.util.encode64(forge.util.hexToBytes(h.digest().toHex()));
      ret = (unsignedToken + "." + signature64).replace(/\//g, '_').replace(/\+/g, '-').replace(/\=/g, '');
      return ret;
    },
    dec: function(token){
      var jwtStruct, payload;
      jwtStruct = token.split('.');
      while (jwtStruct[1].length % 4 !== 0) {
        jwtStruct[1] += "=";
      }
      return payload = JSON.parse(forge.util.decode64(jwtStruct[1]));
    }
  };
}).call(this);

},{}],30:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var co, superagent, superagentPromise, log, genNewClientKey, getClientKey, clientSign, promise;
  co = require('co');
  superagent = require('superagent');
  superagentPromise = require('superagent-promise');
  log = debug('dollast:request');
  genNewClientKey = function(){
    return forge.util.bytesToHex(forge.random.getBytesSync(32));
  };
  getClientKey = function(){
    var clientKey;
    clientKey = localStorage.clientKey;
    if (!clientKey) {
      clientKey = genNewClientKey();
      localStorage.clientKey = clientKey;
    }
    return clientKey;
  };
  clientSign = function(txt){
    return txt;
  };
  promise = this.Promise || require('bluebird');
  module.exports = superagentPromise(superagent, promise);
}).call(this);

},{"bluebird":"bluebird","co":"co","superagent":"superagent","superagent-promise":"superagent-promise"}]},{},[2]);
